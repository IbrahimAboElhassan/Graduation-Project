
Kite_Control_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00002de6  00002e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  008001b0  008001b0  00002fca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ffc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b31  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c2  00000000  00000000  00007e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d6  00000000  00000000  0000915b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a20  00000000  00000000  0000b334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c32  00000000  00000000  0000bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003563  00000000  00000000  0000c986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000fee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__vector_7>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 07       	cpc	r19, r31
      82:	63 42       	sbci	r22, 0x23	; 35
      84:	36 b7       	in	r19, 0x36	; 54
      86:	9b d8       	rcall	.-3786   	; 0xfffff1be <__eeprom_end+0xff7ef1be>
      88:	a7 1a       	sub	r10, r23
      8a:	39 68       	ori	r19, 0x89	; 137
      8c:	56 18       	sub	r5, r6
      8e:	ae ba       	out	0x1e, r10	; 30
      90:	ab 55       	subi	r26, 0x5B	; 91
      92:	8c 1d       	adc	r24, r12
      94:	3c b7       	in	r19, 0x3c	; 60
      96:	cc 57       	subi	r28, 0x7C	; 124
      98:	63 bd       	out	0x23, r22	; 35
      9a:	6d ed       	ldi	r22, 0xDD	; 221
      9c:	fd 75       	andi	r31, 0x5D	; 93
      9e:	3e f6       	brtc	.-114    	; 0x2e <__FUSE_REGION_LENGTH__+0x2c>
      a0:	17 72       	andi	r17, 0x27	; 39
      a2:	31 bf       	out	0x31, r19	; 49
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 05       	cpc	r19, r15
      aa:	a8 4c       	sbci	r26, 0xC8	; 200
      ac:	cd b2       	in	r12, 0x1d	; 29
      ae:	d4 4e       	sbci	r29, 0xE4	; 228
      b0:	b9 38       	cpi	r27, 0x89	; 137
      b2:	36 a9       	ldd	r19, Z+54	; 0x36
      b4:	02 0c       	add	r0, r2
      b6:	50 b9       	out	0x00, r21	; 0
      b8:	91 86       	std	Z+9, r9	; 0x09
      ba:	88 08       	sbc	r8, r8
      bc:	3c a6       	std	Y+44, r3	; 0x2c
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	2a be       	out	0x3a, r2	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 08       	sbc	r3, r15
      c8:	00 00       	nop
      ca:	00 be       	out	0x30, r0	; 48
      cc:	92 24       	eor	r9, r2
      ce:	49 12       	cpse	r4, r25
      d0:	3e ab       	std	Y+54, r19	; 0x36
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	cd cc       	rjmp	.-1638   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
      d8:	cc 4c       	sbci	r28, 0xCC	; 204
      da:	3e 00       	.word	0x003e	; ????
      dc:	00 00       	nop
      de:	80 be       	out	0x30, r8	; 48
      e0:	ab aa       	std	Y+51, r10	; 0x33
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	3e 00       	.word	0x003e	; ????
      e6:	00 00       	nop
      e8:	00 bf       	out	0x30, r16	; 48
      ea:	00 00       	nop
      ec:	00 80       	ld	r0, Z
      ee:	3f 00       	.word	0x003f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	08 41       	sbci	r16, 0x18	; 24
      f6:	78 d3       	rcall	.+1776   	; 0x7e8 <BMP180_ReadPressure+0x21a>
      f8:	bb 43       	sbci	r27, 0x3B	; 59
      fa:	87 d1       	rcall	.+782    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
      fc:	13 3d       	cpi	r17, 0xD3	; 211
      fe:	19 0e       	add	r1, r25
     100:	3c c3       	rjmp	.+1656   	; 0x77a <BMP180_ReadPressure+0x1ac>
     102:	bd 42       	sbci	r27, 0x2D	; 45
     104:	82 ad       	ldd	r24, Z+58	; 0x3a
     106:	2b 3e       	cpi	r18, 0xEB	; 235
     108:	68 ec       	ldi	r22, 0xC8	; 200
     10a:	82 76       	andi	r24, 0x62	; 98
     10c:	be d9       	rcall	.-3204   	; 0xfffff48a <__eeprom_end+0xff7ef48a>
     10e:	8f e1       	ldi	r24, 0x1F	; 31
     110:	a9 3e       	cpi	r26, 0xE9	; 233
     112:	4c 80       	ldd	r4, Y+4	; 0x04
     114:	ef ff       	.word	0xffef	; ????
     116:	be 01       	movw	r22, r28
     118:	c4 ff       	sbrs	r28, 4
     11a:	7f 3f       	cpi	r23, 0xFF	; 255
     11c:	00 00       	nop
     11e:	00 00       	nop
	...

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf e5       	ldi	r28, 0x5F	; 95
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	a0 e6       	ldi	r26, 0x60	; 96
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e6 ee       	ldi	r30, 0xE6	; 230
     136:	fd e2       	ldi	r31, 0x2D	; 45
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a0 3b       	cpi	r26, 0xB0	; 176
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	a0 eb       	ldi	r26, 0xB0	; 176
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	a4 3f       	cpi	r26, 0xF4	; 244
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <main>
     158:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	/*Define Vref for ADC, as AVCC*/
	SET_BIT(ADMUX, REFS0);
     160:	87 b1       	in	r24, 0x07	; 7
     162:	80 64       	ori	r24, 0x40	; 64
     164:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, REFS1);
     166:	87 b1       	in	r24, 0x07	; 7
     168:	8f 77       	andi	r24, 0x7F	; 127
     16a:	87 b9       	out	0x07, r24	; 7
	/*Right Adjust*/
	CLR_BIT(ADMUX, ADLAR);
     16c:	87 b1       	in	r24, 0x07	; 7
     16e:	8f 7d       	andi	r24, 0xDF	; 223
     170:	87 b9       	out	0x07, r24	; 7
	/*Choose channel*/
	CLR_BIT(ADMUX, MUX0);
     172:	87 b1       	in	r24, 0x07	; 7
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX1);
     178:	87 b1       	in	r24, 0x07	; 7
     17a:	8d 7f       	andi	r24, 0xFD	; 253
     17c:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX2);
     17e:	87 b1       	in	r24, 0x07	; 7
     180:	8b 7f       	andi	r24, 0xFB	; 251
     182:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX3);
     184:	87 b1       	in	r24, 0x07	; 7
     186:	87 7f       	andi	r24, 0xF7	; 247
     188:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX4);
     18a:	87 b1       	in	r24, 0x07	; 7
     18c:	8f 7e       	andi	r24, 0xEF	; 239
     18e:	87 b9       	out	0x07, r24	; 7
	/*Auto Trigger Mode*/
	SET_BIT(ADCSRA, ADATE);
     190:	86 b1       	in	r24, 0x06	; 6
     192:	80 62       	ori	r24, 0x20	; 32
     194:	86 b9       	out	0x06, r24	; 6
	/*Define Prescalar*/
	SET_BIT(ADCSRA, ADPS0);
     196:	86 b1       	in	r24, 0x06	; 6
     198:	81 60       	ori	r24, 0x01	; 1
     19a:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS1);
     19c:	86 b1       	in	r24, 0x06	; 6
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS2);
     1a2:	86 b1       	in	r24, 0x06	; 6
     1a4:	84 60       	ori	r24, 0x04	; 4
     1a6:	86 b9       	out	0x06, r24	; 6
	/*Enable ADC*/
	SET_BIT(ADCSRA, ADEN);
     1a8:	86 b1       	in	r24, 0x06	; 6
     1aa:	80 68       	ori	r24, 0x80	; 128
     1ac:	86 b9       	out	0x06, r24	; 6
     1ae:	08 95       	ret

000001b0 <ADC_Read>:
}
Uint16t ADC_Read(void)
{
	Uint16t var = 0;
	/*Start Conversion*/
	SET_BIT(ADCSRA, ADSC);
     1b0:	86 b1       	in	r24, 0x06	; 6
     1b2:	80 64       	ori	r24, 0x40	; 64
     1b4:	86 b9       	out	0x06, r24	; 6
	/*Wait and check till flag is one, Polling*/
	while(GET_BIT(ADCSRA, ADIF) != 1);
     1b6:	34 9b       	sbis	0x06, 4	; 6
     1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <ADC_Read+0x6>
	/*Return value*/
	var = ADC_DTA;
     1ba:	84 b1       	in	r24, 0x04	; 4
     1bc:	95 b1       	in	r25, 0x05	; 5
	return var;
     1be:	08 95       	ret

000001c0 <BMP180_ReadInt>:
	referencePressure = pressure_hPa;
}

float BMP180_CalculateRelativePressure(float currentPressure_hPa) {
	return currentPressure_hPa - referencePressure;
}
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	c8 2f       	mov	r28, r24
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	87 e7       	ldi	r24, 0x77	; 119
     1ca:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     1ce:	81 11       	cpse	r24, r1
     1d0:	1b c0       	rjmp	.+54     	; 0x208 <BMP180_ReadInt+0x48>
     1d2:	8c 2f       	mov	r24, r28
     1d4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     1d8:	81 11       	cpse	r24, r1
     1da:	19 c0       	rjmp	.+50     	; 0x20e <BMP180_ReadInt+0x4e>
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	87 e7       	ldi	r24, 0x77	; 119
     1e0:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     1e4:	81 11       	cpse	r24, r1
     1e6:	16 c0       	rjmp	.+44     	; 0x214 <BMP180_ReadInt+0x54>
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     1ee:	c8 2f       	mov	r28, r24
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
     1f2:	dc 2f       	mov	r29, r28
     1f4:	cc 27       	eor	r28, r28
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     1fc:	c8 2b       	or	r28, r24
     1fe:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
     202:	8c 2f       	mov	r24, r28
     204:	9d 2f       	mov	r25, r29
     206:	08 c0       	rjmp	.+16     	; 0x218 <BMP180_ReadInt+0x58>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	05 c0       	rjmp	.+10     	; 0x218 <BMP180_ReadInt+0x58>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <BMP180_ReadInt+0x58>
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <BMP180_SetReferencePressure>:
     21e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     222:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     226:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     22a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     22e:	08 95       	ret

00000230 <BMP180_CalculateRelativeAltitude>:
//

// Calculate relative altitude based on the reference pressure
float BMP180_CalculateRelativeAltitude(float currentPressure_hPa) {
	return 44330.0 * (1.0 - pow(currentPressure_hPa / referencePressure, 0.19029495718));
     230:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     234:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     238:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     23c:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     240:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     244:	2e ea       	ldi	r18, 0xAE	; 174
     246:	3c ed       	ldi	r19, 0xDC	; 220
     248:	42 e4       	ldi	r20, 0x42	; 66
     24a:	5e e3       	ldi	r21, 0x3E	; 62
     24c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <pow>
     250:	9b 01       	movw	r18, r22
     252:	ac 01       	movw	r20, r24
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e8       	ldi	r24, 0x80	; 128
     25a:	9f e3       	ldi	r25, 0x3F	; 63
     25c:	0e 94 9e 11 	call	0x233c	; 0x233c <__subsf3>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	3a e2       	ldi	r19, 0x2A	; 42
     264:	4d e2       	ldi	r20, 0x2D	; 45
     266:	57 e4       	ldi	r21, 0x47	; 71
     268:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
}//
     26c:	08 95       	ret

0000026e <delay_ms>:
	I2C_Stop();
	delay_ms(100); // Wait for reset to complete
}

void delay_ms(uint16_t ms)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	00 d0       	rcall	.+0      	; 0x274 <delay_ms+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
	uint16_t delay_count = F_CPU / 4000;

	volatile uint16_t i;
	while (ms) {
     278:	10 c0       	rjmp	.+32     	; 0x29a <delay_ms+0x2c>
		for (i = 0; i < delay_count; i++) {
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	07 c0       	rjmp	.+14     	; 0x28e <delay_ms+0x20>
			__asm__ volatile ("nop");
     280:	00 00       	nop
{
	uint16_t delay_count = F_CPU / 4000;

	volatile uint16_t i;
	while (ms) {
		for (i = 0; i < delay_count; i++) {
     282:	29 81       	ldd	r18, Y+1	; 0x01
     284:	3a 81       	ldd	r19, Y+2	; 0x02
     286:	2f 5f       	subi	r18, 0xFF	; 255
     288:	3f 4f       	sbci	r19, 0xFF	; 255
     28a:	3a 83       	std	Y+2, r19	; 0x02
     28c:	29 83       	std	Y+1, r18	; 0x01
     28e:	29 81       	ldd	r18, Y+1	; 0x01
     290:	3a 81       	ldd	r19, Y+2	; 0x02
     292:	20 3a       	cpi	r18, 0xA0	; 160
     294:	3f 40       	sbci	r19, 0x0F	; 15
     296:	a0 f3       	brcs	.-24     	; 0x280 <delay_ms+0x12>
			__asm__ volatile ("nop");
		}
		ms--;
     298:	01 97       	sbiw	r24, 0x01	; 1
void delay_ms(uint16_t ms)
{
	uint16_t delay_count = F_CPU / 4000;

	volatile uint16_t i;
	while (ms) {
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	71 f7       	brne	.-36     	; 0x27a <delay_ms+0xc>
		for (i = 0; i < delay_count; i++) {
			__asm__ volatile ("nop");
		}
		ms--;
	}
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <BMP180_Init>:
	I2C_Stop();
	return value;
}


int8_t BMP180_Init(BMP180_OSS oss) {
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	18 2f       	mov	r17, r24
	I2C_Init(50000);
     2b0:	60 e5       	ldi	r22, 0x50	; 80
     2b2:	73 ec       	ldi	r23, 0xC3	; 195
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 63 05 	call	0xac6	; 0xac6 <I2C_Init>
	delay_ms(100);
     2bc:	84 e6       	ldi	r24, 0x64	; 100
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

	uint8_t chip_id;
	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return -1;
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	87 e7       	ldi	r24, 0x77	; 119
     2c8:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     2cc:	81 11       	cpse	r24, r1
     2ce:	55 c0       	rjmp	.+170    	; 0x37a <BMP180_Init+0xd2>
	if (I2C_Write(0xD0) != I2C_SUCCESS) return -2;
     2d0:	80 ed       	ldi	r24, 0xD0	; 208
     2d2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     2d6:	81 11       	cpse	r24, r1
     2d8:	52 c0       	rjmp	.+164    	; 0x37e <BMP180_Init+0xd6>
	if (I2C_Start(BMP180_I2C_ADDR, I2C_READ) != I2C_SUCCESS) return -3;
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	87 e7       	ldi	r24, 0x77	; 119
     2de:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     2e2:	81 11       	cpse	r24, r1
     2e4:	4e c0       	rjmp	.+156    	; 0x382 <BMP180_Init+0xda>
	chip_id = I2C_Read(I2C_NACK);
     2e6:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     2ea:	c8 2f       	mov	r28, r24
	I2C_Stop();
     2ec:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
	if (chip_id != 0x55) return -4;
     2f0:	c5 35       	cpi	r28, 0x55	; 85
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <BMP180_Init+0x4e>
     2f4:	48 c0       	rjmp	.+144    	; 0x386 <BMP180_Init+0xde>
	
	// Read calibration data from EEPROM
	calibData.AC1 = BMP180_ReadInt(0xAA);
     2f6:	8a ea       	ldi	r24, 0xAA	; 170
     2f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     2fc:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <calibData+0x1>
     300:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <calibData>
	if (calibData.AC1 == 0) return -5;
     304:	89 2b       	or	r24, r25
     306:	09 f4       	brne	.+2      	; 0x30a <BMP180_Init+0x62>
     308:	40 c0       	rjmp	.+128    	; 0x38a <BMP180_Init+0xe2>
	calibData.AC2 = BMP180_ReadInt(0xAC);
     30a:	8c ea       	ldi	r24, 0xAC	; 172
     30c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     310:	c1 eb       	ldi	r28, 0xB1	; 177
     312:	d1 e0       	ldi	r29, 0x01	; 1
     314:	9b 83       	std	Y+3, r25	; 0x03
     316:	8a 83       	std	Y+2, r24	; 0x02
	calibData.AC3 = BMP180_ReadInt(0xAE);
     318:	8e ea       	ldi	r24, 0xAE	; 174
     31a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     31e:	9d 83       	std	Y+5, r25	; 0x05
     320:	8c 83       	std	Y+4, r24	; 0x04
	calibData.AC4 = BMP180_ReadInt(0xB0);
     322:	80 eb       	ldi	r24, 0xB0	; 176
     324:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     328:	9f 83       	std	Y+7, r25	; 0x07
     32a:	8e 83       	std	Y+6, r24	; 0x06
	calibData.AC5 = BMP180_ReadInt(0xB2);
     32c:	82 eb       	ldi	r24, 0xB2	; 178
     32e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     332:	99 87       	std	Y+9, r25	; 0x09
     334:	88 87       	std	Y+8, r24	; 0x08
	calibData.AC6 = BMP180_ReadInt(0xB4);
     336:	84 eb       	ldi	r24, 0xB4	; 180
     338:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     33c:	9b 87       	std	Y+11, r25	; 0x0b
     33e:	8a 87       	std	Y+10, r24	; 0x0a
	calibData.B1 = BMP180_ReadInt(0xB6);
     340:	86 eb       	ldi	r24, 0xB6	; 182
     342:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     346:	9d 87       	std	Y+13, r25	; 0x0d
     348:	8c 87       	std	Y+12, r24	; 0x0c
	calibData.B2 = BMP180_ReadInt(0xB8);
     34a:	88 eb       	ldi	r24, 0xB8	; 184
     34c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     350:	9f 87       	std	Y+15, r25	; 0x0f
     352:	8e 87       	std	Y+14, r24	; 0x0e
	calibData.MB = BMP180_ReadInt(0xBA);
     354:	8a eb       	ldi	r24, 0xBA	; 186
     356:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     35a:	99 8b       	std	Y+17, r25	; 0x11
     35c:	88 8b       	std	Y+16, r24	; 0x10
	calibData.MC = BMP180_ReadInt(0xBC);
     35e:	8c eb       	ldi	r24, 0xBC	; 188
     360:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     364:	9b 8b       	std	Y+19, r25	; 0x13
     366:	8a 8b       	std	Y+18, r24	; 0x12
	calibData.MD = BMP180_ReadInt(0xBE);
     368:	8e eb       	ldi	r24, 0xBE	; 190
     36a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     36e:	9d 8b       	std	Y+21, r25	; 0x15
     370:	8c 8b       	std	Y+20, r24	; 0x14

	current_oss = oss;
     372:	10 93 b0 01 	sts	0x01B0, r17	; 0x8001b0 <__data_end>
	return 0; // Success
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	09 c0       	rjmp	.+18     	; 0x38c <BMP180_Init+0xe4>
int8_t BMP180_Init(BMP180_OSS oss) {
	I2C_Init(50000);
	delay_ms(100);

	uint8_t chip_id;
	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return -1;
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	07 c0       	rjmp	.+14     	; 0x38c <BMP180_Init+0xe4>
	if (I2C_Write(0xD0) != I2C_SUCCESS) return -2;
     37e:	8e ef       	ldi	r24, 0xFE	; 254
     380:	05 c0       	rjmp	.+10     	; 0x38c <BMP180_Init+0xe4>
	if (I2C_Start(BMP180_I2C_ADDR, I2C_READ) != I2C_SUCCESS) return -3;
     382:	8d ef       	ldi	r24, 0xFD	; 253
     384:	03 c0       	rjmp	.+6      	; 0x38c <BMP180_Init+0xe4>
	chip_id = I2C_Read(I2C_NACK);
	I2C_Stop();
	if (chip_id != 0x55) return -4;
     386:	8c ef       	ldi	r24, 0xFC	; 252
     388:	01 c0       	rjmp	.+2      	; 0x38c <BMP180_Init+0xe4>
	
	// Read calibration data from EEPROM
	calibData.AC1 = BMP180_ReadInt(0xAA);
	if (calibData.AC1 == 0) return -5;
     38a:	8b ef       	ldi	r24, 0xFB	; 251
	calibData.MC = BMP180_ReadInt(0xBC);
	calibData.MD = BMP180_ReadInt(0xBE);

	current_oss = oss;
	return 0; // Success
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	08 95       	ret

00000394 <BMP180_ReadUT>:

// Read uncompensated temperature from BMP180
static int32_t BMP180_ReadUT(void) {
	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return 0;
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	87 e7       	ldi	r24, 0x77	; 119
     398:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     39c:	81 11       	cpse	r24, r1
     39e:	18 c0       	rjmp	.+48     	; 0x3d0 <BMP180_ReadUT+0x3c>
	if (I2C_Write(BMP180_CONTROL_REG) != I2C_SUCCESS) return 0;
     3a0:	84 ef       	ldi	r24, 0xF4	; 244
     3a2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     3a6:	81 11       	cpse	r24, r1
     3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <BMP180_ReadUT+0x44>
	if (I2C_Write(BMP180_CMD_TEMP) != I2C_SUCCESS) return 0;
     3aa:	8e e2       	ldi	r24, 0x2E	; 46
     3ac:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     3b0:	81 11       	cpse	r24, r1
     3b2:	16 c0       	rjmp	.+44     	; 0x3e0 <BMP180_ReadUT+0x4c>
	I2C_Stop();
     3b4:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
	delay_ms(BMP180_DELAY_TEMP);
     3b8:	85 e0       	ldi	r24, 0x05	; 5
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
	return BMP180_ReadInt(BMP180_MSB_REG);
     3c0:	86 ef       	ldi	r24, 0xF6	; 246
     3c2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BMP180_ReadInt>
     3c6:	bc 01       	movw	r22, r24
     3c8:	99 0f       	add	r25, r25
     3ca:	88 0b       	sbc	r24, r24
     3cc:	99 0b       	sbc	r25, r25
     3ce:	08 95       	ret
	return 0; // Success
}

// Read uncompensated temperature from BMP180
static int32_t BMP180_ReadUT(void) {
	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return 0;
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	cb 01       	movw	r24, r22
     3d6:	08 95       	ret
	if (I2C_Write(BMP180_CONTROL_REG) != I2C_SUCCESS) return 0;
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	cb 01       	movw	r24, r22
     3de:	08 95       	ret
	if (I2C_Write(BMP180_CMD_TEMP) != I2C_SUCCESS) return 0;
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	cb 01       	movw	r24, r22
	I2C_Stop();
	delay_ms(BMP180_DELAY_TEMP);
	return BMP180_ReadInt(BMP180_MSB_REG);
}
     3e6:	08 95       	ret

000003e8 <BMP180_ReadTemperature>:
	up >>= (8 - current_oss);
	return up;
}

// Calculate true temperature
float BMP180_ReadTemperature(void) {
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
	int32_t ut = BMP180_ReadUT();
     3f4:	0e 94 ca 01 	call	0x394	; 0x394 <BMP180_ReadUT>
	if (ut == 0) return 0; // Error reading temperature
     3f8:	61 15       	cp	r22, r1
     3fa:	71 05       	cpc	r23, r1
     3fc:	81 05       	cpc	r24, r1
     3fe:	91 05       	cpc	r25, r1
     400:	09 f4       	brne	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	5a c0       	rjmp	.+180    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>

	int32_t x1 = ((ut - (int32_t)calibData.AC6) * (int32_t)calibData.AC5) >> 15;
     404:	e1 eb       	ldi	r30, 0xB1	; 177
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	22 85       	ldd	r18, Z+10	; 0x0a
     40a:	33 85       	ldd	r19, Z+11	; 0x0b
     40c:	7b 01       	movw	r14, r22
     40e:	8c 01       	movw	r16, r24
     410:	e2 1a       	sub	r14, r18
     412:	f3 0a       	sbc	r15, r19
     414:	01 09       	sbc	r16, r1
     416:	11 09       	sbc	r17, r1
     418:	a8 01       	movw	r20, r16
     41a:	97 01       	movw	r18, r14
     41c:	a0 85       	ldd	r26, Z+8	; 0x08
     41e:	b1 85       	ldd	r27, Z+9	; 0x09
     420:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
     424:	6b 01       	movw	r12, r22
     426:	7c 01       	movw	r14, r24
     428:	0b 2e       	mov	r0, r27
     42a:	bf e0       	ldi	r27, 0x0F	; 15
     42c:	f5 94       	asr	r15
     42e:	e7 94       	ror	r14
     430:	d7 94       	ror	r13
     432:	c7 94       	ror	r12
     434:	ba 95       	dec	r27
     436:	d1 f7       	brne	.-12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     438:	b0 2d       	mov	r27, r0
	int32_t x2 = ((int32_t)calibData.MC << 11) / (x1 + calibData.MD);
     43a:	62 89       	ldd	r22, Z+18	; 0x12
     43c:	73 89       	ldd	r23, Z+19	; 0x13
     43e:	cb 01       	movw	r24, r22
     440:	77 0f       	add	r23, r23
     442:	aa 0b       	sbc	r26, r26
     444:	bb 0b       	sbc	r27, r27
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	05 2e       	mov	r0, r21
     44c:	5b e0       	ldi	r21, 0x0B	; 11
     44e:	66 0f       	add	r22, r22
     450:	77 1f       	adc	r23, r23
     452:	88 1f       	adc	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	5a 95       	dec	r21
     458:	d1 f7       	brne	.-12     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     45a:	50 2d       	mov	r21, r0
     45c:	24 89       	ldd	r18, Z+20	; 0x14
     45e:	35 89       	ldd	r19, Z+21	; 0x15
     460:	89 01       	movw	r16, r18
     462:	33 0f       	add	r19, r19
     464:	22 0b       	sbc	r18, r18
     466:	33 0b       	sbc	r19, r19
     468:	a9 01       	movw	r20, r18
     46a:	98 01       	movw	r18, r16
     46c:	2c 0d       	add	r18, r12
     46e:	3d 1d       	adc	r19, r13
     470:	4e 1d       	adc	r20, r14
     472:	5f 1d       	adc	r21, r15
     474:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__divmodsi4>
	int32_t b5 = x1 + x2;
     478:	d7 01       	movw	r26, r14
     47a:	c6 01       	movw	r24, r12
     47c:	82 0f       	add	r24, r18
     47e:	93 1f       	adc	r25, r19
     480:	a4 1f       	adc	r26, r20
     482:	b5 1f       	adc	r27, r21
	float temperature = ((b5 + 8) >> 4) / 10.0;
     484:	08 96       	adiw	r24, 0x08	; 8
     486:	a1 1d       	adc	r26, r1
     488:	b1 1d       	adc	r27, r1
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	68 94       	set
     490:	13 f8       	bld	r1, 3
     492:	95 95       	asr	r25
     494:	87 95       	ror	r24
     496:	77 95       	ror	r23
     498:	67 95       	ror	r22
     49a:	16 94       	lsr	r1
     49c:	d1 f7       	brne	.-12     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     49e:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e2       	ldi	r20, 0x20	; 32
     4a8:	51 e4       	ldi	r21, 0x41	; 65
     4aa:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
	return temperature;
     4ae:	56 2f       	mov	r21, r22
     4b0:	47 2f       	mov	r20, r23
     4b2:	38 2f       	mov	r19, r24
     4b4:	29 2f       	mov	r18, r25
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
}

// Calculate true temperature
float BMP180_ReadTemperature(void) {
	int32_t ut = BMP180_ReadUT();
	if (ut == 0) return 0; // Error reading temperature
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	20 e0       	ldi	r18, 0x00	; 0
	int32_t x1 = ((ut - (int32_t)calibData.AC6) * (int32_t)calibData.AC5) >> 15;
	int32_t x2 = ((int32_t)calibData.MC << 11) / (x1 + calibData.MD);
	int32_t b5 = x1 + x2;
	float temperature = ((b5 + 8) >> 4) / 10.0;
	return temperature;
}
     4c0:	65 2f       	mov	r22, r21
     4c2:	74 2f       	mov	r23, r20
     4c4:	83 2f       	mov	r24, r19
     4c6:	92 2f       	mov	r25, r18
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	08 95       	ret

000004d6 <BMP180_ReadUP>:
	delay_ms(BMP180_DELAY_TEMP);
	return BMP180_ReadInt(BMP180_MSB_REG);
}

// Read uncompensated pressure from BMP180
static int32_t BMP180_ReadUP(void) {
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
	uint8_t cmd;
	uint8_t delay;

	switch (current_oss) {
     4e2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	71 f0       	breq	.+28     	; 0x506 <BMP180_ReadUP+0x30>
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <BMP180_ReadUP+0x1e>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	39 f4       	brne	.+14     	; 0x500 <BMP180_ReadUP+0x2a>
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <BMP180_ReadUP+0x24>
		case BMP180_ULTRA:
		cmd = BMP180_CMD_PRES + (3 << 6);
		delay = 26;
     4f4:	da e1       	ldi	r29, 0x1A	; 26
	uint8_t cmd;
	uint8_t delay;

	switch (current_oss) {
		case BMP180_ULTRA:
		cmd = BMP180_CMD_PRES + (3 << 6);
     4f6:	c4 ef       	ldi	r28, 0xF4	; 244
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <BMP180_ReadUP+0x34>
		cmd = BMP180_CMD_PRES + (2 << 6);
		delay = 14;
		break;
		case BMP180_STANDARD:
		cmd = BMP180_CMD_PRES + (1 << 6);
		delay = 8;
     4fa:	d8 e0       	ldi	r29, 0x08	; 8
		case BMP180_HIGH:
		cmd = BMP180_CMD_PRES + (2 << 6);
		delay = 14;
		break;
		case BMP180_STANDARD:
		cmd = BMP180_CMD_PRES + (1 << 6);
     4fc:	c4 e7       	ldi	r28, 0x74	; 116
		delay = 8;
		break;
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <BMP180_ReadUP+0x34>
		case BMP180_LOW:
		default:
		cmd = BMP180_CMD_PRES;
		delay = 5;
     500:	d5 e0       	ldi	r29, 0x05	; 5
		cmd = BMP180_CMD_PRES + (1 << 6);
		delay = 8;
		break;
		case BMP180_LOW:
		default:
		cmd = BMP180_CMD_PRES;
     502:	c4 e3       	ldi	r28, 0x34	; 52
		delay = 5;
		break;
     504:	02 c0       	rjmp	.+4      	; 0x50a <BMP180_ReadUP+0x34>
		cmd = BMP180_CMD_PRES + (3 << 6);
		delay = 26;
		break;
		case BMP180_HIGH:
		cmd = BMP180_CMD_PRES + (2 << 6);
		delay = 14;
     506:	de e0       	ldi	r29, 0x0E	; 14
		case BMP180_ULTRA:
		cmd = BMP180_CMD_PRES + (3 << 6);
		delay = 26;
		break;
		case BMP180_HIGH:
		cmd = BMP180_CMD_PRES + (2 << 6);
     508:	c4 eb       	ldi	r28, 0xB4	; 180
		cmd = BMP180_CMD_PRES;
		delay = 5;
		break;
	}

	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return 0;
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	87 e7       	ldi	r24, 0x77	; 119
     50e:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     512:	81 11       	cpse	r24, r1
     514:	46 c0       	rjmp	.+140    	; 0x5a2 <BMP180_ReadUP+0xcc>
	if (I2C_Write(BMP180_CONTROL_REG) != I2C_SUCCESS) return 0;
     516:	84 ef       	ldi	r24, 0xF4	; 244
     518:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     51c:	81 11       	cpse	r24, r1
     51e:	45 c0       	rjmp	.+138    	; 0x5aa <BMP180_ReadUP+0xd4>
	if (I2C_Write(cmd) != I2C_SUCCESS) return 0;
     520:	8c 2f       	mov	r24, r28
     522:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
     526:	81 11       	cpse	r24, r1
     528:	44 c0       	rjmp	.+136    	; 0x5b2 <BMP180_ReadUP+0xdc>
	I2C_Stop();
     52a:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
	delay_ms(delay);
     52e:	8d 2f       	mov	r24, r29
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

	if (I2C_Start(BMP180_I2C_ADDR, I2C_READ) != I2C_SUCCESS) return 0;
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	87 e7       	ldi	r24, 0x77	; 119
     53a:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
     53e:	81 11       	cpse	r24, r1
     540:	3c c0       	rjmp	.+120    	; 0x5ba <BMP180_ReadUP+0xe4>
	int32_t up = ((int32_t)I2C_Read(I2C_ACK) << 16) | ((int32_t)I2C_Read(I2C_ACK) << 8) | I2C_Read(I2C_NACK);
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     548:	c8 2e       	mov	r12, r24
     54a:	d1 2c       	mov	r13, r1
     54c:	e1 2c       	mov	r14, r1
     54e:	f1 2c       	mov	r15, r1
     550:	76 01       	movw	r14, r12
     552:	dd 24       	eor	r13, r13
     554:	cc 24       	eor	r12, r12
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 2f       	mov	r27, r26
     564:	a9 2f       	mov	r26, r25
     566:	98 2f       	mov	r25, r24
     568:	88 27       	eor	r24, r24
     56a:	c8 2a       	or	r12, r24
     56c:	d9 2a       	or	r13, r25
     56e:	ea 2a       	or	r14, r26
     570:	fb 2a       	or	r15, r27
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     578:	c8 2a       	or	r12, r24
	I2C_Stop();
     57a:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>

	up >>= (8 - current_oss);
     57e:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <__data_end>
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 1b       	sub	r24, r18
     588:	91 09       	sbc	r25, r1
     58a:	a7 01       	movw	r20, r14
     58c:	96 01       	movw	r18, r12
     58e:	04 c0       	rjmp	.+8      	; 0x598 <BMP180_ReadUP+0xc2>
     590:	55 95       	asr	r21
     592:	47 95       	ror	r20
     594:	37 95       	ror	r19
     596:	27 95       	ror	r18
     598:	8a 95       	dec	r24
     59a:	d2 f7       	brpl	.-12     	; 0x590 <BMP180_ReadUP+0xba>
     59c:	ca 01       	movw	r24, r20
     59e:	b9 01       	movw	r22, r18
	return up;
     5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <BMP180_ReadUP+0xea>
		cmd = BMP180_CMD_PRES;
		delay = 5;
		break;
	}

	if (I2C_Start(BMP180_I2C_ADDR, I2C_WRITE) != I2C_SUCCESS) return 0;
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	cb 01       	movw	r24, r22
     5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <BMP180_ReadUP+0xea>
	if (I2C_Write(BMP180_CONTROL_REG) != I2C_SUCCESS) return 0;
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	cb 01       	movw	r24, r22
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <BMP180_ReadUP+0xea>
	if (I2C_Write(cmd) != I2C_SUCCESS) return 0;
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	cb 01       	movw	r24, r22
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <BMP180_ReadUP+0xea>
	I2C_Stop();
	delay_ms(delay);

	if (I2C_Start(BMP180_I2C_ADDR, I2C_READ) != I2C_SUCCESS) return 0;
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	cb 01       	movw	r24, r22
	int32_t up = ((int32_t)I2C_Read(I2C_ACK) << 16) | ((int32_t)I2C_Read(I2C_ACK) << 8) | I2C_Read(I2C_NACK);
	I2C_Stop();

	up >>= (8 - current_oss);
	return up;
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	08 95       	ret

000005ce <BMP180_ReadPressure>:
	float temperature = ((b5 + 8) >> 4) / 10.0;
	return temperature;
}

// Calculate true pressure
float BMP180_ReadPressure(void) {
     5ce:	4f 92       	push	r4
     5d0:	5f 92       	push	r5
     5d2:	6f 92       	push	r6
     5d4:	7f 92       	push	r7
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <BMP180_ReadPressure+0x22>
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <BMP180_ReadPressure+0x24>
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	int32_t ut = BMP180_ReadUT();
     5f6:	0e 94 ca 01 	call	0x394	; 0x394 <BMP180_ReadUT>
     5fa:	6b 01       	movw	r12, r22
     5fc:	7c 01       	movw	r14, r24
	int32_t up = BMP180_ReadUP();
     5fe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <BMP180_ReadUP>
     602:	2b 01       	movw	r4, r22
     604:	3c 01       	movw	r6, r24
	if (ut == 0 || up == 0) return 0; // Error reading temperature or pressure
     606:	c1 14       	cp	r12, r1
     608:	d1 04       	cpc	r13, r1
     60a:	e1 04       	cpc	r14, r1
     60c:	f1 04       	cpc	r15, r1
     60e:	09 f4       	brne	.+2      	; 0x612 <BMP180_ReadPressure+0x44>
     610:	5c c1       	rjmp	.+696    	; 0x8ca <__stack+0x6b>
     612:	67 2b       	or	r22, r23
     614:	68 2b       	or	r22, r24
     616:	69 2b       	or	r22, r25
     618:	09 f4       	brne	.+2      	; 0x61c <BMP180_ReadPressure+0x4e>
     61a:	5b c1       	rjmp	.+694    	; 0x8d2 <__stack+0x73>

	int32_t x1 = ((ut - (int32_t)calibData.AC6) * (int32_t)calibData.AC5) >> 15;
     61c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <calibData+0xa>
     620:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <calibData+0xb>
     624:	a7 01       	movw	r20, r14
     626:	96 01       	movw	r18, r12
     628:	28 1b       	sub	r18, r24
     62a:	39 0b       	sbc	r19, r25
     62c:	41 09       	sbc	r20, r1
     62e:	51 09       	sbc	r21, r1
     630:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <calibData+0x8>
     634:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <calibData+0x9>
     638:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
     63c:	4b 01       	movw	r8, r22
     63e:	5c 01       	movw	r10, r24
     640:	07 2e       	mov	r0, r23
     642:	7f e0       	ldi	r23, 0x0F	; 15
     644:	b5 94       	asr	r11
     646:	a7 94       	ror	r10
     648:	97 94       	ror	r9
     64a:	87 94       	ror	r8
     64c:	7a 95       	dec	r23
     64e:	d1 f7       	brne	.-12     	; 0x644 <BMP180_ReadPressure+0x76>
     650:	70 2d       	mov	r23, r0
	int32_t x2 = ((int32_t)calibData.MC << 11) / (x1 + calibData.MD);
     652:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <calibData+0x12>
     656:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <calibData+0x13>
     65a:	cb 01       	movw	r24, r22
     65c:	77 0f       	add	r23, r23
     65e:	aa 0b       	sbc	r26, r26
     660:	bb 0b       	sbc	r27, r27
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	05 2e       	mov	r0, r21
     668:	5b e0       	ldi	r21, 0x0B	; 11
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	88 1f       	adc	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	5a 95       	dec	r21
     674:	d1 f7       	brne	.-12     	; 0x66a <BMP180_ReadPressure+0x9c>
     676:	50 2d       	mov	r21, r0
     678:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <calibData+0x14>
     67c:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <calibData+0x15>
     680:	89 01       	movw	r16, r18
     682:	33 0f       	add	r19, r19
     684:	22 0b       	sbc	r18, r18
     686:	33 0b       	sbc	r19, r19
     688:	a9 01       	movw	r20, r18
     68a:	98 01       	movw	r18, r16
     68c:	28 0d       	add	r18, r8
     68e:	39 1d       	adc	r19, r9
     690:	4a 1d       	adc	r20, r10
     692:	5b 1d       	adc	r21, r11
     694:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__divmodsi4>
	int32_t b5 = x1 + x2;
     698:	82 0e       	add	r8, r18
     69a:	93 1e       	adc	r9, r19
     69c:	a4 1e       	adc	r10, r20
     69e:	b5 1e       	adc	r11, r21

	int32_t b6 = b5 - 4000;
     6a0:	20 ea       	ldi	r18, 0xA0	; 160
     6a2:	82 1a       	sub	r8, r18
     6a4:	2f e0       	ldi	r18, 0x0F	; 15
     6a6:	92 0a       	sbc	r9, r18
     6a8:	a1 08       	sbc	r10, r1
     6aa:	b1 08       	sbc	r11, r1
	x1 = (calibData.B2 * (b6 * b6 >> 12)) >> 11;
     6ac:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <calibData+0xe>
     6b0:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <calibData+0xf>
     6b4:	a5 01       	movw	r20, r10
     6b6:	94 01       	movw	r18, r8
     6b8:	c5 01       	movw	r24, r10
     6ba:	b4 01       	movw	r22, r8
     6bc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__mulsi3>
     6c0:	9b 01       	movw	r18, r22
     6c2:	ac 01       	movw	r20, r24
     6c4:	01 2e       	mov	r0, r17
     6c6:	1c e0       	ldi	r17, 0x0C	; 12
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	37 95       	ror	r19
     6ce:	27 95       	ror	r18
     6d0:	1a 95       	dec	r17
     6d2:	d1 f7       	brne	.-12     	; 0x6c8 <BMP180_ReadPressure+0xfa>
     6d4:	10 2d       	mov	r17, r0
     6d6:	29 83       	std	Y+1, r18	; 0x01
     6d8:	3a 83       	std	Y+2, r19	; 0x02
     6da:	4b 83       	std	Y+3, r20	; 0x03
     6dc:	5c 83       	std	Y+4, r21	; 0x04
     6de:	df 01       	movw	r26, r30
     6e0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__mulshisi3>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	0b 2e       	mov	r0, r27
     6ea:	bb e0       	ldi	r27, 0x0B	; 11
     6ec:	f5 94       	asr	r15
     6ee:	e7 94       	ror	r14
     6f0:	d7 94       	ror	r13
     6f2:	c7 94       	ror	r12
     6f4:	ba 95       	dec	r27
     6f6:	d1 f7       	brne	.-12     	; 0x6ec <BMP180_ReadPressure+0x11e>
     6f8:	b0 2d       	mov	r27, r0
	x2 = calibData.AC2 * b6 >> 11;
     6fa:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <calibData+0x2>
     6fe:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <calibData+0x3>
     702:	a5 01       	movw	r20, r10
     704:	94 01       	movw	r18, r8
     706:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__mulshisi3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	07 2e       	mov	r0, r23
     710:	7b e0       	ldi	r23, 0x0B	; 11
     712:	b5 95       	asr	r27
     714:	a7 95       	ror	r26
     716:	97 95       	ror	r25
     718:	87 95       	ror	r24
     71a:	7a 95       	dec	r23
     71c:	d1 f7       	brne	.-12     	; 0x712 <BMP180_ReadPressure+0x144>
     71e:	70 2d       	mov	r23, r0
	int32_t x3 = x1 + x2;
     720:	8c 0d       	add	r24, r12
     722:	9d 1d       	adc	r25, r13
     724:	ae 1d       	adc	r26, r14
     726:	bf 1d       	adc	r27, r15
	int32_t b3 = (((calibData.AC1 * 4 + x3) << current_oss) + 2) >> 2;
     728:	e1 eb       	ldi	r30, 0xB1	; 177
     72a:	f1 e0       	ldi	r31, 0x01	; 1
     72c:	c0 80       	ld	r12, Z
     72e:	d1 80       	ldd	r13, Z+1	; 0x01
     730:	cc 0c       	add	r12, r12
     732:	dd 1c       	adc	r13, r13
     734:	cc 0c       	add	r12, r12
     736:	dd 1c       	adc	r13, r13
     738:	0d 2c       	mov	r0, r13
     73a:	00 0c       	add	r0, r0
     73c:	ee 08       	sbc	r14, r14
     73e:	ff 08       	sbc	r15, r15
     740:	c8 0e       	add	r12, r24
     742:	d9 1e       	adc	r13, r25
     744:	ea 1e       	adc	r14, r26
     746:	fb 1e       	adc	r15, r27
     748:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <__data_end>
     74c:	0e 2e       	mov	r0, r30
     74e:	04 c0       	rjmp	.+8      	; 0x758 <BMP180_ReadPressure+0x18a>
     750:	cc 0c       	add	r12, r12
     752:	dd 1c       	adc	r13, r13
     754:	ee 1c       	adc	r14, r14
     756:	ff 1c       	adc	r15, r15
     758:	0a 94       	dec	r0
     75a:	d2 f7       	brpl	.-12     	; 0x750 <BMP180_ReadPressure+0x182>
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	cf 0e       	add	r12, r31
     760:	d1 1c       	adc	r13, r1
     762:	e1 1c       	adc	r14, r1
     764:	f1 1c       	adc	r15, r1
     766:	f5 94       	asr	r15
     768:	e7 94       	ror	r14
     76a:	d7 94       	ror	r13
     76c:	c7 94       	ror	r12
     76e:	f5 94       	asr	r15
     770:	e7 94       	ror	r14
     772:	d7 94       	ror	r13
     774:	c7 94       	ror	r12

	x1 = calibData.AC3 * b6 >> 13;
     776:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <calibData+0x4>
     77a:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <calibData+0x5>
     77e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__mulshisi3>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24
     786:	07 2e       	mov	r0, r23
     788:	7d e0       	ldi	r23, 0x0D	; 13
     78a:	b5 94       	asr	r11
     78c:	a7 94       	ror	r10
     78e:	97 94       	ror	r9
     790:	87 94       	ror	r8
     792:	7a 95       	dec	r23
     794:	d1 f7       	brne	.-12     	; 0x78a <BMP180_ReadPressure+0x1bc>
     796:	70 2d       	mov	r23, r0
	x2 = (calibData.B1 * (b6 * b6 >> 12)) >> 16;
     798:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <calibData+0xc>
     79c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <calibData+0xd>
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	3a 81       	ldd	r19, Y+2	; 0x02
     7a4:	4b 81       	ldd	r20, Y+3	; 0x03
     7a6:	5c 81       	ldd	r21, Y+4	; 0x04
     7a8:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__mulshisi3>
     7ac:	bb 27       	eor	r27, r27
     7ae:	97 fd       	sbrc	r25, 7
     7b0:	b0 95       	com	r27
     7b2:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     7b4:	88 0d       	add	r24, r8
     7b6:	99 1d       	adc	r25, r9
     7b8:	aa 1d       	adc	r26, r10
     7ba:	bb 1d       	adc	r27, r11
     7bc:	02 96       	adiw	r24, 0x02	; 2
     7be:	a1 1d       	adc	r26, r1
     7c0:	b1 1d       	adc	r27, r1
     7c2:	ac 01       	movw	r20, r24
     7c4:	bd 01       	movw	r22, r26
     7c6:	75 95       	asr	r23
     7c8:	67 95       	ror	r22
     7ca:	57 95       	ror	r21
     7cc:	47 95       	ror	r20
     7ce:	75 95       	asr	r23
     7d0:	67 95       	ror	r22
     7d2:	57 95       	ror	r21
     7d4:	47 95       	ror	r20
	uint32_t b4 = (calibData.AC4 * (uint32_t)(x3 + 32768)) >> 15;
     7d6:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <calibData+0x6>
     7da:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <calibData+0x7>
     7de:	9a 01       	movw	r18, r20
     7e0:	ab 01       	movw	r20, r22
     7e2:	30 58       	subi	r19, 0x80	; 128
     7e4:	4f 4f       	sbci	r20, 0xFF	; 255
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
     7e8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
     7ec:	4b 01       	movw	r8, r22
     7ee:	5c 01       	movw	r10, r24
     7f0:	07 2e       	mov	r0, r23
     7f2:	7f e0       	ldi	r23, 0x0F	; 15
     7f4:	b6 94       	lsr	r11
     7f6:	a7 94       	ror	r10
     7f8:	97 94       	ror	r9
     7fa:	87 94       	ror	r8
     7fc:	7a 95       	dec	r23
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <BMP180_ReadPressure+0x226>
     800:	70 2d       	mov	r23, r0
	uint32_t b7 = ((uint32_t)up - b3) * (50000 >> current_oss);
     802:	a3 01       	movw	r20, r6
     804:	92 01       	movw	r18, r4
     806:	2c 19       	sub	r18, r12
     808:	3d 09       	sbc	r19, r13
     80a:	4e 09       	sbc	r20, r14
     80c:	5f 09       	sbc	r21, r15
     80e:	80 e5       	ldi	r24, 0x50	; 80
     810:	93 ec       	ldi	r25, 0xC3	; 195
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	04 c0       	rjmp	.+8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     81c:	95 95       	asr	r25
     81e:	87 95       	ror	r24
     820:	77 95       	ror	r23
     822:	67 95       	ror	r22
     824:	ea 95       	dec	r30
     826:	d2 f7       	brpl	.-12     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     828:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__mulsi3>

	int32_t p;
	if (b7 < 0x80000000) {
     82c:	99 23       	and	r25, r25
     82e:	5c f0       	brlt	.+22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		p = (b7 * 2) / b4;
     830:	66 0f       	add	r22, r22
     832:	77 1f       	adc	r23, r23
     834:	88 1f       	adc	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	a5 01       	movw	r20, r10
     83a:	94 01       	movw	r18, r8
     83c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodsi4>
     840:	69 01       	movw	r12, r18
     842:	7a 01       	movw	r14, r20
     844:	0a c0       	rjmp	.+20     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		} else {
		p = (b7 / b4) * 2;
     846:	a5 01       	movw	r20, r10
     848:	94 01       	movw	r18, r8
     84a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodsi4>
     84e:	69 01       	movw	r12, r18
     850:	7a 01       	movw	r14, r20
     852:	cc 0c       	add	r12, r12
     854:	dd 1c       	adc	r13, r13
     856:	ee 1c       	adc	r14, r14
     858:	ff 1c       	adc	r15, r15
	}

	x1 = (p >> 8) * (p >> 8);
     85a:	99 27       	eor	r25, r25
     85c:	f7 fc       	sbrc	r15, 7
     85e:	9a 95       	dec	r25
     860:	8f 2d       	mov	r24, r15
     862:	7e 2d       	mov	r23, r14
     864:	6d 2d       	mov	r22, r13
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__mulsi3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     872:	ae ed       	ldi	r26, 0xDE	; 222
     874:	bb e0       	ldi	r27, 0x0B	; 11
     876:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
     87a:	4c 01       	movw	r8, r24
     87c:	bb 24       	eor	r11, r11
     87e:	97 fc       	sbrc	r9, 7
     880:	b0 94       	com	r11
     882:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     884:	a3 e4       	ldi	r26, 0x43	; 67
     886:	b3 ee       	ldi	r27, 0xE3	; 227
     888:	a7 01       	movw	r20, r14
     88a:	96 01       	movw	r18, r12
     88c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulohisi3>
     890:	bb 27       	eor	r27, r27
     892:	97 fd       	sbrc	r25, 7
     894:	b0 95       	com	r27
     896:	ab 2f       	mov	r26, r27
	p += (x1 + x2 + 3791) >> 4;
     898:	88 0d       	add	r24, r8
     89a:	99 1d       	adc	r25, r9
     89c:	aa 1d       	adc	r26, r10
     89e:	bb 1d       	adc	r27, r11
     8a0:	81 53       	subi	r24, 0x31	; 49
     8a2:	91 4f       	sbci	r25, 0xF1	; 241
     8a4:	af 4f       	sbci	r26, 0xFF	; 255
     8a6:	bf 4f       	sbci	r27, 0xFF	; 255
     8a8:	68 94       	set
     8aa:	13 f8       	bld	r1, 3
     8ac:	b5 95       	asr	r27
     8ae:	a7 95       	ror	r26
     8b0:	97 95       	ror	r25
     8b2:	87 95       	ror	r24
     8b4:	16 94       	lsr	r1
     8b6:	d1 f7       	brne	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	6c 0d       	add	r22, r12
     8be:	7d 1d       	adc	r23, r13
     8c0:	8e 1d       	adc	r24, r14
     8c2:	9f 1d       	adc	r25, r15

	//return (float)p / 100.0;
	return (float)p;
     8c4:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <__stack+0x79>

// Calculate true pressure
float BMP180_ReadPressure(void) {
	int32_t ut = BMP180_ReadUT();
	int32_t up = BMP180_ReadUP();
	if (ut == 0 || up == 0) return 0; // Error reading temperature or pressure
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	cb 01       	movw	r24, r22
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <__stack+0x79>
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	cb 01       	movw	r24, r22
	x2 = (-7357 * p) >> 16;
	p += (x1 + x2 + 3791) >> 4;

	//return (float)p / 100.0;
	return (float)p;
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	9f 90       	pop	r9
     8f6:	8f 90       	pop	r8
     8f8:	7f 90       	pop	r7
     8fa:	6f 90       	pop	r6
     8fc:	5f 90       	pop	r5
     8fe:	4f 90       	pop	r4
     900:	08 95       	ret

00000902 <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
     902:	44 23       	and	r20, r20
     904:	19 f0       	breq	.+6      	; 0x90c <DIO_SetPin_Direction+0xa>
     906:	41 30       	cpi	r20, 0x01	; 1
     908:	c9 f1       	breq	.+114    	; 0x97c <DIO_SetPin_Direction+0x7a>
     90a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	91 f0       	breq	.+36     	; 0x934 <DIO_SetPin_Direction+0x32>
     910:	28 f0       	brcs	.+10     	; 0x91c <DIO_SetPin_Direction+0x1a>
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	d9 f0       	breq	.+54     	; 0x94c <DIO_SetPin_Direction+0x4a>
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	29 f1       	breq	.+74     	; 0x964 <DIO_SetPin_Direction+0x62>
     91a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
     91c:	2a b3       	in	r18, 0x1a	; 26
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <DIO_SetPin_Direction+0x26>
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	6a 95       	dec	r22
     92a:	e2 f7       	brpl	.-8      	; 0x924 <DIO_SetPin_Direction+0x22>
     92c:	80 95       	com	r24
     92e:	82 23       	and	r24, r18
     930:	8a bb       	out	0x1a, r24	; 26
			break;
     932:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
     934:	27 b3       	in	r18, 0x17	; 23
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_SetPin_Direction+0x3e>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	6a 95       	dec	r22
     942:	e2 f7       	brpl	.-8      	; 0x93c <DIO_SetPin_Direction+0x3a>
     944:	80 95       	com	r24
     946:	82 23       	and	r24, r18
     948:	87 bb       	out	0x17, r24	; 23
			break;
     94a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
     94c:	24 b3       	in	r18, 0x14	; 20
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_SetPin_Direction+0x56>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	6a 95       	dec	r22
     95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_SetPin_Direction+0x52>
     95c:	80 95       	com	r24
     95e:	82 23       	and	r24, r18
     960:	84 bb       	out	0x14, r24	; 20
			break;
     962:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
     964:	21 b3       	in	r18, 0x11	; 17
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_SetPin_Direction+0x6e>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_SetPin_Direction+0x6a>
     974:	80 95       	com	r24
     976:	82 23       	and	r24, r18
     978:	81 bb       	out	0x11, r24	; 17
			break;
     97a:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	89 f0       	breq	.+34     	; 0x9a2 <DIO_SetPin_Direction+0xa0>
     980:	28 f0       	brcs	.+10     	; 0x98c <DIO_SetPin_Direction+0x8a>
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	c9 f0       	breq	.+50     	; 0x9b8 <DIO_SetPin_Direction+0xb6>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	11 f1       	breq	.+68     	; 0x9ce <DIO_SetPin_Direction+0xcc>
     98a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
     98c:	2a b3       	in	r18, 0x1a	; 26
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_SetPin_Direction+0x96>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_SetPin_Direction+0x92>
     99c:	82 2b       	or	r24, r18
     99e:	8a bb       	out	0x1a, r24	; 26
			break;
     9a0:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
     9a2:	27 b3       	in	r18, 0x17	; 23
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_SetPin_Direction+0xac>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	6a 95       	dec	r22
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_SetPin_Direction+0xa8>
     9b2:	82 2b       	or	r24, r18
     9b4:	87 bb       	out	0x17, r24	; 23
			break;
     9b6:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
     9b8:	24 b3       	in	r18, 0x14	; 20
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_SetPin_Direction+0xc2>
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	6a 95       	dec	r22
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_SetPin_Direction+0xbe>
     9c8:	82 2b       	or	r24, r18
     9ca:	84 bb       	out	0x14, r24	; 20
			break;
     9cc:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
     9ce:	21 b3       	in	r18, 0x11	; 17
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_SetPin_Direction+0xd8>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	6a 95       	dec	r22
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_SetPin_Direction+0xd4>
     9de:	82 2b       	or	r24, r18
     9e0:	81 bb       	out	0x11, r24	; 17
     9e2:	08 95       	ret

000009e4 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
     9e4:	44 23       	and	r20, r20
     9e6:	19 f0       	breq	.+6      	; 0x9ee <DIO_SetPin_Value+0xa>
     9e8:	41 30       	cpi	r20, 0x01	; 1
     9ea:	c9 f1       	breq	.+114    	; 0xa5e <DIO_SetPin_Value+0x7a>
     9ec:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	91 f0       	breq	.+36     	; 0xa16 <DIO_SetPin_Value+0x32>
     9f2:	28 f0       	brcs	.+10     	; 0x9fe <DIO_SetPin_Value+0x1a>
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	d9 f0       	breq	.+54     	; 0xa2e <DIO_SetPin_Value+0x4a>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	29 f1       	breq	.+74     	; 0xa46 <DIO_SetPin_Value+0x62>
     9fc:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
     9fe:	2b b3       	in	r18, 0x1b	; 27
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_SetPin_Value+0x26>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	6a 95       	dec	r22
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_SetPin_Value+0x22>
     a0e:	80 95       	com	r24
     a10:	82 23       	and	r24, r18
     a12:	8b bb       	out	0x1b, r24	; 27
			break;
     a14:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
     a16:	28 b3       	in	r18, 0x18	; 24
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_SetPin_Value+0x3e>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	6a 95       	dec	r22
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_SetPin_Value+0x3a>
     a26:	80 95       	com	r24
     a28:	82 23       	and	r24, r18
     a2a:	88 bb       	out	0x18, r24	; 24
			break;
     a2c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
     a2e:	25 b3       	in	r18, 0x15	; 21
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_SetPin_Value+0x56>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	6a 95       	dec	r22
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_SetPin_Value+0x52>
     a3e:	80 95       	com	r24
     a40:	82 23       	and	r24, r18
     a42:	85 bb       	out	0x15, r24	; 21
			break;
     a44:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
     a46:	22 b3       	in	r18, 0x12	; 18
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_SetPin_Value+0x6e>
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	6a 95       	dec	r22
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_SetPin_Value+0x6a>
     a56:	80 95       	com	r24
     a58:	82 23       	and	r24, r18
     a5a:	82 bb       	out	0x12, r24	; 18
			break;
     a5c:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	89 f0       	breq	.+34     	; 0xa84 <DIO_SetPin_Value+0xa0>
     a62:	28 f0       	brcs	.+10     	; 0xa6e <DIO_SetPin_Value+0x8a>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	c9 f0       	breq	.+50     	; 0xa9a <DIO_SetPin_Value+0xb6>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	11 f1       	breq	.+68     	; 0xab0 <DIO_SetPin_Value+0xcc>
     a6c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
     a6e:	2b b3       	in	r18, 0x1b	; 27
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_SetPin_Value+0x96>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_SetPin_Value+0x92>
     a7e:	82 2b       	or	r24, r18
     a80:	8b bb       	out	0x1b, r24	; 27
			break;
     a82:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
     a84:	28 b3       	in	r18, 0x18	; 24
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_SetPin_Value+0xac>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_SetPin_Value+0xa8>
     a94:	82 2b       	or	r24, r18
     a96:	88 bb       	out	0x18, r24	; 24
			break;
     a98:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
     a9a:	25 b3       	in	r18, 0x15	; 21
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <DIO_SetPin_Value+0xc2>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	6a 95       	dec	r22
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <DIO_SetPin_Value+0xbe>
     aaa:	82 2b       	or	r24, r18
     aac:	85 bb       	out	0x15, r24	; 21
			break;
     aae:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
     ab0:	22 b3       	in	r18, 0x12	; 18
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_SetPin_Value+0xd8>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	6a 95       	dec	r22
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_SetPin_Value+0xd4>
     ac0:	82 2b       	or	r24, r18
     ac2:	82 bb       	out	0x12, r24	; 18
     ac4:	08 95       	ret

00000ac6 <I2C_Init>:
#define prescaler 1

void I2C_Init(unsigned long SCL_Clock)
{
	// Try a lower clock speed, e.g., 50 kHz
	TWBR = (uint8_t)(((F_CPU / 50000) - 16) / (2 * prescaler));
     ac6:	88 e9       	ldi	r24, 0x98	; 152
     ac8:	80 b9       	out	0x00, r24	; 0
	if (prescaler == 1)
	TWSR = 0;
     aca:	11 b8       	out	0x01, r1	; 1
     acc:	08 95       	ret

00000ace <I2C_Start>:


uint8_t I2C_Start(uint8_t address, uint8_t direction)
{
	// Send START condition
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     ace:	94 ea       	ldi	r25, 0xA4	; 164
     ad0:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1 << TWINT)));
     ad2:	06 b6       	in	r0, 0x36	; 54
     ad4:	07 fe       	sbrs	r0, 7
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <I2C_Start+0x4>

	// Check if START was sent successfully
	uint8_t status = TWSR & 0xF8;
     ad8:	91 b1       	in	r25, 0x01	; 1
     ada:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x08 && status != 0x10)  // 0x10 is for repeated start
     adc:	98 30       	cpi	r25, 0x08	; 8
     ade:	11 f0       	breq	.+4      	; 0xae4 <I2C_Start+0x16>
     ae0:	90 31       	cpi	r25, 0x10	; 16
     ae2:	91 f4       	brne	.+36     	; 0xb08 <I2C_Start+0x3a>
	return status;  // Return the actual status for debugging

	// Send device address
	TWDR = (address << 1) | direction;
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	86 2b       	or	r24, r22
     aec:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     aee:	84 e8       	ldi	r24, 0x84	; 132
     af0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
     af2:	06 b6       	in	r0, 0x36	; 54
     af4:	07 fe       	sbrs	r0, 7
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <I2C_Start+0x24>

	// Check if address was sent successfully
	status = TWSR & 0xF8;
     af8:	81 b1       	in	r24, 0x01	; 1
     afa:	88 7f       	andi	r24, 0xF8	; 248
	if (status != 0x18 && status != 0x40)
     afc:	88 31       	cpi	r24, 0x18	; 24
     afe:	31 f0       	breq	.+12     	; 0xb0c <I2C_Start+0x3e>
     b00:	80 34       	cpi	r24, 0x40	; 64
     b02:	29 f4       	brne	.+10     	; 0xb0e <I2C_Start+0x40>
	return status;  // Return the actual status for debugging

	return I2C_SUCCESS;
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
	while (!(TWCR & (1 << TWINT)));

	// Check if START was sent successfully
	uint8_t status = TWSR & 0xF8;
	if (status != 0x08 && status != 0x10)  // 0x10 is for repeated start
	return status;  // Return the actual status for debugging
     b08:	89 2f       	mov	r24, r25
     b0a:	08 95       	ret
	// Check if address was sent successfully
	status = TWSR & 0xF8;
	if (status != 0x18 && status != 0x40)
	return status;  // Return the actual status for debugging

	return I2C_SUCCESS;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
}
     b0e:	08 95       	ret

00000b10 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     b10:	84 e9       	ldi	r24, 0x94	; 148
     b12:	86 bf       	out	0x36, r24	; 54
	while (TWCR & (1 << TWSTO));
     b14:	06 b6       	in	r0, 0x36	; 54
     b16:	04 fc       	sbrc	r0, 4
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <I2C_Stop+0x4>
}
     b1a:	08 95       	ret

00000b1c <I2C_Write>:

uint8_t I2C_Write(uint8_t data)
{
	TWDR = data;
     b1c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     b1e:	84 e8       	ldi	r24, 0x84	; 132
     b20:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
     b22:	06 b6       	in	r0, 0x36	; 54
     b24:	07 fe       	sbrs	r0, 7
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <I2C_Write+0x6>

	if ((TWSR & 0xF8) != 0x28)
     b28:	81 b1       	in	r24, 0x01	; 1
     b2a:	88 7f       	andi	r24, 0xF8	; 248
     b2c:	88 32       	cpi	r24, 0x28	; 40
     b2e:	11 f0       	breq	.+4      	; 0xb34 <I2C_Write+0x18>
	return I2C_ERROR;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

	return I2C_SUCCESS;
     b34:	80 e0       	ldi	r24, 0x00	; 0
}
     b36:	08 95       	ret

00000b38 <I2C_Read>:

uint8_t I2C_Read(uint8_t ack)
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA);
     b38:	20 e4       	ldi	r18, 0x40	; 64
     b3a:	82 9f       	mul	r24, r18
     b3c:	c0 01       	movw	r24, r0
     b3e:	11 24       	eor	r1, r1
     b40:	84 68       	ori	r24, 0x84	; 132
     b42:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
     b44:	06 b6       	in	r0, 0x36	; 54
     b46:	07 fe       	sbrs	r0, 7
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <I2C_Read+0xc>

	return TWDR;
     b4a:	83 b1       	in	r24, 0x03	; 3
}
     b4c:	08 95       	ret

00000b4e <I2C_ReadNack>:

uint8_t I2C_ReadNack(void)
{
	return I2C_Read(I2C_NACK);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
     b54:	08 95       	ret

00000b56 <LCD_Write_Command>:
	#else
	#warning "Wrong Mode"
	#endif
}
void LCD_Write_Command(Uint8t command)
{
     b56:	cf 93       	push	r28
     b58:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_LOW);
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
     b78:	8b b3       	in	r24, 0x1b	; 27
     b7a:	9c 2f       	mov	r25, r28
     b7c:	90 7f       	andi	r25, 0xF0	; 240
     b7e:	8f 70       	andi	r24, 0x0F	; 15
     b80:	89 2b       	or	r24, r25
     b82:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	63 e0       	ldi	r22, 0x03	; 3
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	8f e9       	ldi	r24, 0x9F	; 159
     b90:	9f e0       	ldi	r25, 0x0F	; 15
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <LCD_Write_Command+0x3c>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <LCD_Write_Command+0x42>
     b98:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command  << 4) | (PORTA & 0x0F);
     ba4:	20 e1       	ldi	r18, 0x10	; 16
     ba6:	c2 9f       	mul	r28, r18
     ba8:	c0 01       	movw	r24, r0
     baa:	11 24       	eor	r1, r1
     bac:	9b b3       	in	r25, 0x1b	; 27
     bae:	9f 70       	andi	r25, 0x0F	; 15
     bb0:	89 2b       	or	r24, r25
     bb2:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
     bbe:	8f e9       	ldi	r24, 0x9F	; 159
     bc0:	9f e0       	ldi	r25, 0x0F	; 15
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCD_Write_Command+0x6c>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <LCD_Write_Command+0x72>
     bc8:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	63 e0       	ldi	r22, 0x03	; 3
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
     bd4:	8f e1       	ldi	r24, 0x1F	; 31
     bd6:	9e e4       	ldi	r25, 0x4E	; 78
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCD_Write_Command+0x82>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <LCD_Write_Command+0x88>
     bde:	00 00       	nop
	_delay_ms(5);
}
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <LCD_Init>:
#include <stdio.h>

void LCD_Init(void)
{
	#if LCD_Mode == 4
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RS, LCD_OUTPUT);
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RW, LCD_OUTPUT);
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_EN, LCD_OUTPUT);
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	63 e0       	ldi	r22, 0x03	; 3
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA4, LCD_OUTPUT);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	64 e0       	ldi	r22, 0x04	; 4
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA5, LCD_OUTPUT);
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	65 e0       	ldi	r22, 0x05	; 5
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA6, LCD_OUTPUT);
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	66 e0       	ldi	r22, 0x06	; 6
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA7, LCD_OUTPUT);
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	67 e0       	ldi	r22, 0x07	; 7
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	81 ee       	ldi	r24, 0xE1	; 225
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	21 50       	subi	r18, 0x01	; 1
     c32:	80 40       	sbci	r24, 0x00	; 0
     c34:	90 40       	sbci	r25, 0x00	; 0
     c36:	e1 f7       	brne	.-8      	; 0xc30 <LCD_Init+0x4c>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <LCD_Init+0x56>
     c3a:	00 00       	nop
	_delay_ms(100);
	LCD_Write_Command(0x02);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x33);
     c42:	83 e3       	ldi	r24, 0x33	; 51
     c44:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x32);
     c48:	82 e3       	ldi	r24, 0x32	; 50
     c4a:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x28);
     c4e:	88 e2       	ldi	r24, 0x28	; 40
     c50:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
     c54:	8c e0       	ldi	r24, 0x0C	; 12
     c56:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x01);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_Command(0x06);
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
     c66:	08 95       	ret

00000c68 <LCD_Write_Data>:
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
	_delay_ms(5);
}
void LCD_Write_Data(Uint8t data)
{
     c68:	cf 93       	push	r28
     c6a:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_HIGH);
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data & 0xF0) | (PORTA & 0x0F);
     c8a:	8b b3       	in	r24, 0x1b	; 27
     c8c:	9c 2f       	mov	r25, r28
     c8e:	90 7f       	andi	r25, 0xF0	; 240
     c90:	8f 70       	andi	r24, 0x0F	; 15
     c92:	89 2b       	or	r24, r25
     c94:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	63 e0       	ldi	r22, 0x03	; 3
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
     ca0:	8f e9       	ldi	r24, 0x9F	; 159
     ca2:	9f e0       	ldi	r25, 0x0F	; 15
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <LCD_Write_Data+0x3c>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <LCD_Write_Data+0x42>
     caa:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data << 4) | (PORTA & 0x0F);
     cb6:	20 e1       	ldi	r18, 0x10	; 16
     cb8:	c2 9f       	mul	r28, r18
     cba:	c0 01       	movw	r24, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	9b b3       	in	r25, 0x1b	; 27
     cc0:	9f 70       	andi	r25, 0x0F	; 15
     cc2:	89 2b       	or	r24, r25
     cc4:	8b bb       	out	0x1b, r24	; 27
	//PORTA = (data & 0xF0) | (PORTA & 0x0F);
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
     cd0:	8f e9       	ldi	r24, 0x9F	; 159
     cd2:	9f e0       	ldi	r25, 0x0F	; 15
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCD_Write_Data+0x6c>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <LCD_Write_Data+0x72>
     cda:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
     ce6:	8f e1       	ldi	r24, 0x1F	; 31
     ce8:	9e e4       	ldi	r25, 0x4E	; 78
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <LCD_Write_Data+0x82>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <LCD_Write_Data+0x88>
     cf0:	00 00       	nop
	_delay_ms(5);
}
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
     cfc:	08 95       	ret

00000cfe <LCD_Write_String>:
}
void LCD_Write_String(Uint8t* str)/**/
{
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	ec 01       	movw	r28, r24
	while(*str != '\0')
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <LCD_Write_String+0x1a>
     d06:	8f e9       	ldi	r24, 0x9F	; 159
     d08:	9f e0       	ldi	r25, 0x0F	; 15
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <LCD_Write_String+0xc>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <LCD_Write_String+0x12>
     d10:	00 00       	nop
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
     d12:	89 91       	ld	r24, Y+
     d14:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_Write_Data>
{
	LCD_Write_Command(0x01);
}
void LCD_Write_String(Uint8t* str)/**/
{
	while(*str != '\0')
     d18:	88 81       	ld	r24, Y
     d1a:	81 11       	cpse	r24, r1
     d1c:	f4 cf       	rjmp	.-24     	; 0xd06 <LCD_Write_String+0x8>
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
		str++;
	}
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	2a 97       	sbiw	r28, 0x0a	; 10
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	//itoa(number,(char*)num,10);//Integer
	ltoa(number,(Uint8t*)num,10);//Number need to print, Empty character string to fill with numbers, enter base needed, Long
     d38:	2a e0       	ldi	r18, 0x0A	; 10
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	ae 01       	movw	r20, r28
     d3e:	4f 5f       	subi	r20, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <ltoa>
	LCD_Write_String(num);
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
}
     d4e:	2a 96       	adiw	r28, 0x0a	; 10
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <displaySensorData>:
			LCD_Write_String((uint8_t*)"Lower Loop");
		}
		_delay_ms(1000);
		lastPhase = phase;
	}
}
     d60:	4f 92       	push	r4
     d62:	5f 92       	push	r5
     d64:	6f 92       	push	r6
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	28 97       	sbiw	r28, 0x08	; 8
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <MPU6050_Get_Pitch>
     d90:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     d94:	2b 01       	movw	r4, r22
     d96:	3c 01       	movw	r6, r24
     d98:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MPU6050_Get_Roll>
     d9c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     da0:	4b 01       	movw	r8, r22
     da2:	5c 01       	movw	r10, r24
     da4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <WindSensor_GetSpeed>
     da8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     dac:	6b 01       	movw	r12, r22
     dae:	7c 01       	movw	r14, r24
     db0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <BMP180_ReadTemperature>
     db4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     db8:	69 83       	std	Y+1, r22	; 0x01
     dba:	7a 83       	std	Y+2, r23	; 0x02
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <BMP180_ReadPressure>
     dc4:	0e 94 18 01 	call	0x230	; 0x230 <BMP180_CalculateRelativeAltitude>
     dc8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     dcc:	6d 83       	std	Y+5, r22	; 0x05
     dce:	7e 83       	std	Y+6, r23	; 0x06
     dd0:	8f 83       	std	Y+7, r24	; 0x07
     dd2:	98 87       	std	Y+8, r25	; 0x08
     dd4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
     dd8:	88 e6       	ldi	r24, 0x68	; 104
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     de0:	b2 01       	movw	r22, r4
     de2:	55 0c       	add	r5, r5
     de4:	88 0b       	sbc	r24, r24
     de6:	99 0b       	sbc	r25, r25
     de8:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
     dec:	8b e6       	ldi	r24, 0x6B	; 107
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     df4:	b4 01       	movw	r22, r8
     df6:	99 0c       	add	r9, r9
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
     e00:	80 ec       	ldi	r24, 0xC0	; 192
     e02:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
     e06:	8f e6       	ldi	r24, 0x6F	; 111
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     e0e:	b6 01       	movw	r22, r12
     e10:	dd 0c       	add	r13, r13
     e12:	88 0b       	sbc	r24, r24
     e14:	99 0b       	sbc	r25, r25
     e16:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
     e1a:	82 e7       	ldi	r24, 0x72	; 114
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     e22:	29 81       	ldd	r18, Y+1	; 0x01
     e24:	3a 81       	ldd	r19, Y+2	; 0x02
     e26:	b9 01       	movw	r22, r18
     e28:	33 0f       	add	r19, r19
     e2a:	88 0b       	sbc	r24, r24
     e2c:	99 0b       	sbc	r25, r25
     e2e:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	87 ea       	ldi	r24, 0xA7	; 167
     e36:	91 e6       	ldi	r25, 0x61	; 97
     e38:	31 50       	subi	r19, 0x01	; 1
     e3a:	80 40       	sbci	r24, 0x00	; 0
     e3c:	90 40       	sbci	r25, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <displaySensorData+0xd8>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <displaySensorData+0xe2>
     e42:	00 00       	nop
     e44:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
     e48:	86 e7       	ldi	r24, 0x76	; 118
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	b9 01       	movw	r22, r18
     e56:	33 0f       	add	r19, r19
     e58:	88 0b       	sbc	r24, r24
     e5a:	99 0b       	sbc	r25, r25
     e5c:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
     e60:	80 e5       	ldi	r24, 0x50	; 80
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	87 ea       	ldi	r24, 0xA7	; 167
     e6c:	91 e6       	ldi	r25, 0x61	; 97
     e6e:	31 50       	subi	r19, 0x01	; 1
     e70:	80 40       	sbci	r24, 0x00	; 0
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <displaySensorData+0x10e>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <displaySensorData+0x118>
     e78:	00 00       	nop
     e7a:	28 96       	adiw	r28, 0x08	; 8
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	7f 90       	pop	r7
     e9c:	6f 90       	pop	r6
     e9e:	5f 90       	pop	r5
     ea0:	4f 90       	pop	r4
     ea2:	08 95       	ret

00000ea4 <applyPitchAdjustment>:
 * Note            - Rotates the stepper motor clockwise or counterclockwise based on the adjustment
 * ================================================================
 */

void applyPitchAdjustment(float adjustment)
{
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	6b 01       	movw	r12, r22
     eae:	7c 01       	movw	r14, r24
	LCD_Clear();
     eb0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	
	if (adjustment > 0)
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	b4 f5       	brge	.+108    	; 0xf32 <applyPitchAdjustment+0x8e>
	 {
		LCD_Write_String((uint8_t*)"Pitch CW");
     ec6:	8e e9       	ldi	r24, 0x9E	; 158
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0); 
     ece:	80 ec       	ldi	r24, 0xC0	; 192
     ed0:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"N_Pitch ");
     ed4:	87 ea       	ldi	r24, 0xA7	; 167
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Number((int)adjustment);
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     ee4:	07 2e       	mov	r0, r23
     ee6:	00 0c       	add	r0, r0
     ee8:	88 0b       	sbc	r24, r24
     eea:	99 0b       	sbc	r25, r25
     eec:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
		LCD_Write_String((uint8_t*)" deg");
     ef0:	80 eb       	ldi	r24, 0xB0	; 176
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		StepperMotor_RotateClockwise(period, (uint16_t)(adjustment * steps_for_180_degrees / 180.0));
     ef8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <steps_for_180_degrees>
     efc:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <steps_for_180_degrees+0x1>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
     f08:	9b 01       	movw	r18, r22
     f0a:	ac 01       	movw	r20, r24
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	44 e3       	ldi	r20, 0x34	; 52
     f1a:	53 e4       	ldi	r21, 0x43	; 67
     f1c:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     f20:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
     f24:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <period>
     f28:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <period+0x1>
     f2c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <StepperMotor_RotateClockwise>
     f30:	42 c0       	rjmp	.+132    	; 0xfb6 <applyPitchAdjustment+0x112>
	 } else if (adjustment < 0) 
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	a9 01       	movw	r20, r18
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
     f40:	88 23       	and	r24, r24
     f42:	cc f5       	brge	.+114    	; 0xfb6 <applyPitchAdjustment+0x112>
	 {
		LCD_Write_String((uint8_t*)"Pitch CCW");
     f44:	85 eb       	ldi	r24, 0xB5	; 181
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0); 
     f4c:	80 ec       	ldi	r24, 0xC0	; 192
     f4e:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"N_Pitch ");
     f52:	87 ea       	ldi	r24, 0xA7	; 167
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Number((int)-adjustment);
     f5a:	f7 fa       	bst	r15, 7
     f5c:	f0 94       	com	r15
     f5e:	f7 f8       	bld	r15, 7
     f60:	f0 94       	com	r15
     f62:	c7 01       	movw	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     f6a:	07 2e       	mov	r0, r23
     f6c:	00 0c       	add	r0, r0
     f6e:	88 0b       	sbc	r24, r24
     f70:	99 0b       	sbc	r25, r25
     f72:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
		LCD_Write_String((uint8_t*)" deg");
     f76:	80 eb       	ldi	r24, 0xB0	; 176
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		StepperMotor_RotateAnticlockwise(period, (uint16_t)(-adjustment * steps_for_180_degrees / 180.0));
     f7e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <steps_for_180_degrees>
     f82:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <steps_for_180_degrees+0x1>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	c7 01       	movw	r24, r14
     f94:	b6 01       	movw	r22, r12
     f96:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	44 e3       	ldi	r20, 0x34	; 52
     fa0:	53 e4       	ldi	r21, 0x43	; 67
     fa2:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     fa6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
     faa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <period>
     fae:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <period+0x1>
     fb2:	0e 94 82 10 	call	0x2104	; 0x2104 <StepperMotor_RotateAnticlockwise>
     fb6:	2f ef       	ldi	r18, 0xFF	; 255
     fb8:	83 ed       	ldi	r24, 0xD3	; 211
     fba:	90 e3       	ldi	r25, 0x30	; 48
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	80 40       	sbci	r24, 0x00	; 0
     fc0:	90 40       	sbci	r25, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <applyPitchAdjustment+0x118>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <applyPitchAdjustment+0x122>
     fc6:	00 00       	nop
	 }
	 
	_delay_ms(1000);
}
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <applyRollAdjustment>:
 * Note            - Rotates the stepper motor clockwise or counterclockwise based on the adjustment
 * ================================================================
 */

void applyRollAdjustment(float adjustment)
{
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	6b 01       	movw	r12, r22
     fdc:	7c 01       	movw	r14, r24
	LCD_Clear();
     fde:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	
	if (adjustment > 0)
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
     fec:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	b4 f5       	brge	.+108    	; 0x1060 <applyRollAdjustment+0x8e>
	 {
		LCD_Write_String((uint8_t*)"Roll CW");
     ff4:	8f eb       	ldi	r24, 0xBF	; 191
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0); 
     ffc:	80 ec       	ldi	r24, 0xC0	; 192
     ffe:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"N_Roll ");
    1002:	87 ec       	ldi	r24, 0xC7	; 199
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Number((int)adjustment);
    100a:	c7 01       	movw	r24, r14
    100c:	b6 01       	movw	r22, r12
    100e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1012:	07 2e       	mov	r0, r23
    1014:	00 0c       	add	r0, r0
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
		LCD_Write_String((uint8_t*)" deg");
    101e:	80 eb       	ldi	r24, 0xB0	; 176
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		StepperMotor_RotateClockwise(period, (uint16_t)(adjustment * steps_for_180_degrees / 180.0));
    1026:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <steps_for_180_degrees>
    102a:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <steps_for_180_degrees+0x1>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	44 e3       	ldi	r20, 0x34	; 52
    1048:	53 e4       	ldi	r21, 0x43	; 67
    104a:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    104e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    1052:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <period>
    1056:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <period+0x1>
    105a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <StepperMotor_RotateClockwise>
    105e:	42 c0       	rjmp	.+132    	; 0x10e4 <applyRollAdjustment+0x112>
	 } else if (adjustment < 0) 
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    106e:	88 23       	and	r24, r24
    1070:	cc f5       	brge	.+114    	; 0x10e4 <applyRollAdjustment+0x112>
	 {
		LCD_Write_String((uint8_t*)"Roll CCW");
    1072:	8f ec       	ldi	r24, 0xCF	; 207
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0); 
    107a:	80 ec       	ldi	r24, 0xC0	; 192
    107c:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"N_Roll ");
    1080:	87 ec       	ldi	r24, 0xC7	; 199
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Number((int)-adjustment);
    1088:	f7 fa       	bst	r15, 7
    108a:	f0 94       	com	r15
    108c:	f7 f8       	bld	r15, 7
    108e:	f0 94       	com	r15
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1098:	07 2e       	mov	r0, r23
    109a:	00 0c       	add	r0, r0
    109c:	88 0b       	sbc	r24, r24
    109e:	99 0b       	sbc	r25, r25
    10a0:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
		LCD_Write_String((uint8_t*)" deg");
    10a4:	80 eb       	ldi	r24, 0xB0	; 176
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		StepperMotor_RotateAnticlockwise(period, (uint16_t)(-adjustment * steps_for_180_degrees / 180.0));
    10ac:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <steps_for_180_degrees>
    10b0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <steps_for_180_degrees+0x1>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	44 e3       	ldi	r20, 0x34	; 52
    10ce:	53 e4       	ldi	r21, 0x43	; 67
    10d0:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    10d4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    10d8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <period>
    10dc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <period+0x1>
    10e0:	0e 94 82 10 	call	0x2104	; 0x2104 <StepperMotor_RotateAnticlockwise>
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	83 ed       	ldi	r24, 0xD3	; 211
    10e8:	90 e3       	ldi	r25, 0x30	; 48
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	80 40       	sbci	r24, 0x00	; 0
    10ee:	90 40       	sbci	r25, 0x00	; 0
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <applyRollAdjustment+0x118>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <applyRollAdjustment+0x122>
    10f4:	00 00       	nop
	 }
	 
	_delay_ms(1000);
}
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	08 95       	ret

00001100 <altitudeHasIncreased>:
 * ================================================================
 */

int altitudeHasIncreased(int currentAltitude, int* previousAltitude) 
{
	if (currentAltitude > *previousAltitude) {
    1100:	fb 01       	movw	r30, r22
    1102:	20 81       	ld	r18, Z
    1104:	31 81       	ldd	r19, Z+1	; 0x01
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	2c f4       	brge	.+10     	; 0x1116 <altitudeHasIncreased+0x16>
		*previousAltitude = currentAltitude;
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
		return 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	08 95       	ret
	}
	return 0;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
}
    111a:	08 95       	ret

0000111c <altitudeHasDecreased>:
 * ================================================================
 */

int altitudeHasDecreased(int currentAltitude, int* previousAltitude) 
{
	if (currentAltitude < *previousAltitude) {
    111c:	fb 01       	movw	r30, r22
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	2c f4       	brge	.+10     	; 0x1132 <altitudeHasDecreased+0x16>
		*previousAltitude = currentAltitude;
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
		return 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	08 95       	ret
	}
	return 0;
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
}
    1136:	08 95       	ret

00001138 <millis>:
 * ================================================================
 */

unsigned long millis() {
	unsigned long ms;
	cli(); // Disable interrupts
    1138:	f8 94       	cli
	ms = milliseconds;
    113a:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <milliseconds>
    113e:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <milliseconds+0x1>
    1142:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <milliseconds+0x2>
    1146:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <milliseconds+0x3>
	sei(); // Enable interrupts
    114a:	78 94       	sei
	return ms;
}
    114c:	08 95       	ret

0000114e <adjustPitch>:
 * Note            - Calculates PID terms and applies pitch adjustment
 * ================================================================
 */
	
void adjustPitch(int desiredPitch)
{
    114e:	4f 92       	push	r4
    1150:	5f 92       	push	r5
    1152:	6f 92       	push	r6
    1154:	7f 92       	push	r7
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <adjustPitch+0x1e>
    116c:	00 d0       	rcall	.+0      	; 0x116e <adjustPitch+0x20>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	7c 01       	movw	r14, r24
	unsigned long current_time = millis();
    1174:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    1178:	4b 01       	movw	r8, r22
    117a:	5c 01       	movw	r10, r24
	float dt = (current_time - last_time) / 1000.0;  // Convert interval to seconds
    117c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <last_time>
    1180:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <last_time+0x1>
    1184:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <last_time+0x2>
    1188:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <last_time+0x3>
    118c:	a5 01       	movw	r20, r10
    118e:	94 01       	movw	r18, r8
    1190:	28 1b       	sub	r18, r24
    1192:	39 0b       	sbc	r19, r25
    1194:	4a 0b       	sbc	r20, r26
    1196:	5b 0b       	sbc	r21, r27
    1198:	ca 01       	movw	r24, r20
    119a:	b9 01       	movw	r22, r18
    119c:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a e7       	ldi	r20, 0x7A	; 122
    11a6:	54 e4       	ldi	r21, 0x44	; 68
    11a8:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    11ac:	2b 01       	movw	r4, r22
    11ae:	3c 01       	movw	r6, r24
	last_time = current_time;
    11b0:	80 92 d4 01 	sts	0x01D4, r8	; 0x8001d4 <last_time>
    11b4:	90 92 d5 01 	sts	0x01D5, r9	; 0x8001d5 <last_time+0x1>
    11b8:	a0 92 d6 01 	sts	0x01D6, r10	; 0x8001d6 <last_time+0x2>
    11bc:	b0 92 d7 01 	sts	0x01D7, r11	; 0x8001d7 <last_time+0x3>

	int currentPitch = MPU6050_Get_Pitch();
    11c0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <MPU6050_Get_Pitch>
    11c4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
	float error = desiredPitch - currentPitch;
    11c8:	a7 01       	movw	r20, r14
    11ca:	46 1b       	sub	r20, r22
    11cc:	57 0b       	sbc	r21, r23
    11ce:	ba 01       	movw	r22, r20
    11d0:	07 2e       	mov	r0, r23
    11d2:	00 0c       	add	r0, r0
    11d4:	88 0b       	sbc	r24, r24
    11d6:	99 0b       	sbc	r25, r25
    11d8:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
	
	pitch_integral += error * dt;
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	c3 01       	movw	r24, r6
    11e6:	b2 01       	movw	r22, r4
    11e8:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    11ec:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <pitch_integral>
    11f0:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <pitch_integral+0x1>
    11f4:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <pitch_integral+0x2>
    11f8:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <pitch_integral+0x3>
    11fc:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    1200:	4b 01       	movw	r8, r22
    1202:	5c 01       	movw	r10, r24
    1204:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <pitch_integral>
    1208:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <pitch_integral+0x1>
    120c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <pitch_integral+0x2>
    1210:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <pitch_integral+0x3>
	float derivative = (error - pitch_previous_error) / dt;
    1214:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <pitch_previous_error>
    1218:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <pitch_previous_error+0x1>
    121c:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <pitch_previous_error+0x2>
    1220:	50 91 e3 01 	lds	r21, 0x01E3	; 0x8001e3 <pitch_previous_error+0x3>
    1224:	c7 01       	movw	r24, r14
    1226:	b6 01       	movw	r22, r12
    1228:	0e 94 9e 11 	call	0x233c	; 0x233c <__subsf3>
    122c:	a3 01       	movw	r20, r6
    122e:	92 01       	movw	r18, r4
    1230:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1234:	69 83       	std	Y+1, r22	; 0x01
    1236:	7a 83       	std	Y+2, r23	; 0x02
    1238:	8b 83       	std	Y+3, r24	; 0x03
    123a:	9c 83       	std	Y+4, r25	; 0x04
	
	float pitchAdjustment = Kp_pitch * error + Ki_pitch * pitch_integral + Kd_pitch * derivative;
    123c:	a7 01       	movw	r20, r14
    123e:	96 01       	movw	r18, r12
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    1248:	2b 01       	movw	r4, r22
    124a:	3c 01       	movw	r6, r24
    124c:	2d ec       	ldi	r18, 0xCD	; 205
    124e:	3c ec       	ldi	r19, 0xCC	; 204
    1250:	4c ec       	ldi	r20, 0xCC	; 204
    1252:	5d e3       	ldi	r21, 0x3D	; 61
    1254:	c5 01       	movw	r24, r10
    1256:	b4 01       	movw	r22, r8
    1258:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	c3 01       	movw	r24, r6
    1262:	b2 01       	movw	r22, r4
    1264:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	69 81       	ldd	r22, Y+1	; 0x01
    1276:	7a 81       	ldd	r23, Y+2	; 0x02
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	c5 01       	movw	r24, r10
    1286:	b4 01       	movw	r22, r8
    1288:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
	
	pitch_previous_error = error;
    128c:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <pitch_previous_error>
    1290:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <pitch_previous_error+0x1>
    1294:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <pitch_previous_error+0x2>
    1298:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <pitch_previous_error+0x3>
	
	applyPitchAdjustment((int)pitchAdjustment);
    129c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    12a0:	07 2e       	mov	r0, r23
    12a2:	00 0c       	add	r0, r0
    12a4:	88 0b       	sbc	r24, r24
    12a6:	99 0b       	sbc	r25, r25
    12a8:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    12ac:	0e 94 52 07 	call	0xea4	; 0xea4 <applyPitchAdjustment>
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	bf 90       	pop	r11
    12c6:	af 90       	pop	r10
    12c8:	9f 90       	pop	r9
    12ca:	8f 90       	pop	r8
    12cc:	7f 90       	pop	r7
    12ce:	6f 90       	pop	r6
    12d0:	5f 90       	pop	r5
    12d2:	4f 90       	pop	r4
    12d4:	08 95       	ret

000012d6 <adjustRoll>:
 * Note            - Calculates PID terms and applies roll adjustment
 * ================================================================
 */

void adjustRoll(int desiredRoll)
{
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <adjustRoll+0x1e>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <adjustRoll+0x20>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	7c 01       	movw	r14, r24
	unsigned long current_time = millis();
    12fc:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    1300:	4b 01       	movw	r8, r22
    1302:	5c 01       	movw	r10, r24
	float dt = (current_time - last_time) / 1000.0;  // Convert interval to seconds
    1304:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <last_time>
    1308:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <last_time+0x1>
    130c:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <last_time+0x2>
    1310:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <last_time+0x3>
    1314:	a5 01       	movw	r20, r10
    1316:	94 01       	movw	r18, r8
    1318:	28 1b       	sub	r18, r24
    131a:	39 0b       	sbc	r19, r25
    131c:	4a 0b       	sbc	r20, r26
    131e:	5b 0b       	sbc	r21, r27
    1320:	ca 01       	movw	r24, r20
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1334:	2b 01       	movw	r4, r22
    1336:	3c 01       	movw	r6, r24
	last_time = current_time;
    1338:	80 92 d4 01 	sts	0x01D4, r8	; 0x8001d4 <last_time>
    133c:	90 92 d5 01 	sts	0x01D5, r9	; 0x8001d5 <last_time+0x1>
    1340:	a0 92 d6 01 	sts	0x01D6, r10	; 0x8001d6 <last_time+0x2>
    1344:	b0 92 d7 01 	sts	0x01D7, r11	; 0x8001d7 <last_time+0x3>

	int currentRoll = MPU6050_Get_Roll();
    1348:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MPU6050_Get_Roll>
    134c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
	float error = desiredRoll - currentRoll;
    1350:	a7 01       	movw	r20, r14
    1352:	46 1b       	sub	r20, r22
    1354:	57 0b       	sbc	r21, r23
    1356:	ba 01       	movw	r22, r20
    1358:	07 2e       	mov	r0, r23
    135a:	00 0c       	add	r0, r0
    135c:	88 0b       	sbc	r24, r24
    135e:	99 0b       	sbc	r25, r25
    1360:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1364:	6b 01       	movw	r12, r22
    1366:	7c 01       	movw	r14, r24
	
	roll_integral += error * dt;
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	c3 01       	movw	r24, r6
    136e:	b2 01       	movw	r22, r4
    1370:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1374:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <roll_integral>
    1378:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <roll_integral+0x1>
    137c:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <roll_integral+0x2>
    1380:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <roll_integral+0x3>
    1384:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    1388:	4b 01       	movw	r8, r22
    138a:	5c 01       	movw	r10, r24
    138c:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <roll_integral>
    1390:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <roll_integral+0x1>
    1394:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <roll_integral+0x2>
    1398:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <roll_integral+0x3>
	float derivative = (error - roll_previous_error) / dt;
    139c:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <roll_previous_error>
    13a0:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <roll_previous_error+0x1>
    13a4:	40 91 da 01 	lds	r20, 0x01DA	; 0x8001da <roll_previous_error+0x2>
    13a8:	50 91 db 01 	lds	r21, 0x01DB	; 0x8001db <roll_previous_error+0x3>
    13ac:	c7 01       	movw	r24, r14
    13ae:	b6 01       	movw	r22, r12
    13b0:	0e 94 9e 11 	call	0x233c	; 0x233c <__subsf3>
    13b4:	a3 01       	movw	r20, r6
    13b6:	92 01       	movw	r18, r4
    13b8:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    13bc:	69 83       	std	Y+1, r22	; 0x01
    13be:	7a 83       	std	Y+2, r23	; 0x02
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	9c 83       	std	Y+4, r25	; 0x04
	
	float rollAdjustment = Kp_roll * error + Ki_roll * roll_integral + Kd_roll * derivative;
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 ec       	ldi	r20, 0xC0	; 192
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    13d4:	2b 01       	movw	r4, r22
    13d6:	3c 01       	movw	r6, r24
    13d8:	2d ec       	ldi	r18, 0xCD	; 205
    13da:	3c ec       	ldi	r19, 0xCC	; 204
    13dc:	4c ec       	ldi	r20, 0xCC	; 204
    13de:	5d e3       	ldi	r21, 0x3D	; 61
    13e0:	c5 01       	movw	r24, r10
    13e2:	b4 01       	movw	r22, r8
    13e4:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    13e8:	9b 01       	movw	r18, r22
    13ea:	ac 01       	movw	r20, r24
    13ec:	c3 01       	movw	r24, r6
    13ee:	b2 01       	movw	r22, r4
    13f0:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    13f4:	4b 01       	movw	r8, r22
    13f6:	5c 01       	movw	r10, r24
    13f8:	2d ec       	ldi	r18, 0xCD	; 205
    13fa:	3c ec       	ldi	r19, 0xCC	; 204
    13fc:	4c ec       	ldi	r20, 0xCC	; 204
    13fe:	5e e3       	ldi	r21, 0x3E	; 62
    1400:	69 81       	ldd	r22, Y+1	; 0x01
    1402:	7a 81       	ldd	r23, Y+2	; 0x02
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    140c:	9b 01       	movw	r18, r22
    140e:	ac 01       	movw	r20, r24
    1410:	c5 01       	movw	r24, r10
    1412:	b4 01       	movw	r22, r8
    1414:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
	
	roll_previous_error = error;
    1418:	c0 92 d8 01 	sts	0x01D8, r12	; 0x8001d8 <roll_previous_error>
    141c:	d0 92 d9 01 	sts	0x01D9, r13	; 0x8001d9 <roll_previous_error+0x1>
    1420:	e0 92 da 01 	sts	0x01DA, r14	; 0x8001da <roll_previous_error+0x2>
    1424:	f0 92 db 01 	sts	0x01DB, r15	; 0x8001db <roll_previous_error+0x3>
	
	applyRollAdjustment((int)rollAdjustment);
    1428:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    142c:	07 2e       	mov	r0, r23
    142e:	00 0c       	add	r0, r0
    1430:	88 0b       	sbc	r24, r24
    1432:	99 0b       	sbc	r25, r25
    1434:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1438:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <applyRollAdjustment>
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	bf 90       	pop	r11
    1452:	af 90       	pop	r10
    1454:	9f 90       	pop	r9
    1456:	8f 90       	pop	r8
    1458:	7f 90       	pop	r7
    145a:	6f 90       	pop	r6
    145c:	5f 90       	pop	r5
    145e:	4f 90       	pop	r4
    1460:	08 95       	ret

00001462 <controlFigureEight>:
 * Note            - Executes a two-phase figure-eight maneuver, adjusting pitch and roll
 * ================================================================
 */

void controlFigureEight()
{
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <controlFigureEight+0x1e>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <controlFigureEight+0x20>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <controlFigureEight+0x22>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	static int previousAltitude = 0;
	unsigned long phaseStartTime;
	unsigned long lastWindCheckTime = 0;
	int currentPhase = 1;
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3e 83       	std	Y+6, r19	; 0x06
    148e:	2d 83       	std	Y+5, r18	; 0x05

void controlFigureEight()
{
	static int previousAltitude = 0;
	unsigned long phaseStartTime;
	unsigned long lastWindCheckTime = 0;
    1490:	41 2c       	mov	r4, r1
    1492:	51 2c       	mov	r5, r1
    1494:	32 01       	movw	r6, r4
	int currentPhase = 1;
	
	while (1) {
		// Display phase number
		LCD_Clear();
    1496:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
		LCD_Write_String((uint8_t*)"Phase ");
    149a:	88 ed       	ldi	r24, 0xD8	; 216
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Number(currentPhase);
    14a2:	2d 81       	ldd	r18, Y+5	; 0x05
    14a4:	3e 81       	ldd	r19, Y+6	; 0x06
    14a6:	b9 01       	movw	r22, r18
    14a8:	33 0f       	add	r19, r19
    14aa:	88 0b       	sbc	r24, r24
    14ac:	99 0b       	sbc	r25, r25
    14ae:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	87 ea       	ldi	r24, 0xA7	; 167
    14b6:	91 e6       	ldi	r25, 0x61	; 97
    14b8:	31 50       	subi	r19, 0x01	; 1
    14ba:	80 40       	sbci	r24, 0x00	; 0
    14bc:	90 40       	sbci	r25, 0x00	; 0
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <controlFigureEight+0x56>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <controlFigureEight+0x60>
    14c2:	00 00       	nop
		_delay_ms(2000);
		
		phaseStartTime = millis();
    14c4:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    14c8:	4b 01       	movw	r8, r22
    14ca:	5c 01       	movw	r10, r24
		
		// Execute the current phase for 5 seconds
		while (millis() - phaseStartTime < 5000) {
    14cc:	e7 c0       	rjmp	.+462    	; 0x169c <controlFigureEight+0x23a>
			float t = (float)(millis() - phaseStartTime) / 5000.0;
    14ce:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    14d2:	68 19       	sub	r22, r8
    14d4:	79 09       	sbc	r23, r9
    14d6:	8a 09       	sbc	r24, r10
    14d8:	9b 09       	sbc	r25, r11
    14da:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e4       	ldi	r19, 0x40	; 64
    14e2:	4c e9       	ldi	r20, 0x9C	; 156
    14e4:	55 e4       	ldi	r21, 0x45	; 69
    14e6:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    14ea:	6b 01       	movw	r12, r22
    14ec:	7c 01       	movw	r14, r24
			
			float desiredPitch, desiredRoll;
			if (currentPhase == 1) {
    14ee:	2d 81       	ldd	r18, Y+5	; 0x05
    14f0:	3e 81       	ldd	r19, Y+6	; 0x06
    14f2:	21 30       	cpi	r18, 0x01	; 1
    14f4:	31 05       	cpc	r19, r1
    14f6:	29 f5       	brne	.+74     	; 0x1542 <controlFigureEight+0xe0>
				desiredPitch = 10 * sin(2 * M_PI * t);
    14f8:	2b ed       	ldi	r18, 0xDB	; 219
    14fa:	3f e0       	ldi	r19, 0x0F	; 15
    14fc:	49 ec       	ldi	r20, 0xC9	; 201
    14fe:	50 e4       	ldi	r21, 0x40	; 64
    1500:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1504:	0e 94 cd 14 	call	0x299a	; 0x299a <sin>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1514:	69 83       	std	Y+1, r22	; 0x01
    1516:	7a 83       	std	Y+2, r23	; 0x02
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	9c 83       	std	Y+4, r25	; 0x04
				desiredRoll = 20 * sin(4 * M_PI * t);
    151c:	2b ed       	ldi	r18, 0xDB	; 219
    151e:	3f e0       	ldi	r19, 0x0F	; 15
    1520:	49 e4       	ldi	r20, 0x49	; 73
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	c7 01       	movw	r24, r14
    1526:	b6 01       	movw	r22, r12
    1528:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    152c:	0e 94 cd 14 	call	0x299a	; 0x299a <sin>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 ea       	ldi	r20, 0xA0	; 160
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    153c:	6b 01       	movw	r12, r22
    153e:	7c 01       	movw	r14, r24
    1540:	24 c0       	rjmp	.+72     	; 0x158a <controlFigureEight+0x128>
				} else {
				desiredPitch = -10 * sin(2 * M_PI * t);
    1542:	2b ed       	ldi	r18, 0xDB	; 219
    1544:	3f e0       	ldi	r19, 0x0F	; 15
    1546:	49 ec       	ldi	r20, 0xC9	; 201
    1548:	50 e4       	ldi	r21, 0x40	; 64
    154a:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    154e:	0e 94 cd 14 	call	0x299a	; 0x299a <sin>
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 ec       	ldi	r21, 0xC1	; 193
    155a:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    155e:	69 83       	std	Y+1, r22	; 0x01
    1560:	7a 83       	std	Y+2, r23	; 0x02
    1562:	8b 83       	std	Y+3, r24	; 0x03
    1564:	9c 83       	std	Y+4, r25	; 0x04
				desiredRoll = -20 * sin(4 * M_PI * t);
    1566:	2b ed       	ldi	r18, 0xDB	; 219
    1568:	3f e0       	ldi	r19, 0x0F	; 15
    156a:	49 e4       	ldi	r20, 0x49	; 73
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	c7 01       	movw	r24, r14
    1570:	b6 01       	movw	r22, r12
    1572:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1576:	0e 94 cd 14 	call	0x299a	; 0x299a <sin>
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 ea       	ldi	r20, 0xA0	; 160
    1580:	51 ec       	ldi	r21, 0xC1	; 193
    1582:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1586:	6b 01       	movw	r12, r22
    1588:	7c 01       	movw	r14, r24
			}
			
			// Adjust pitch and roll
			adjustPitch((int)desiredPitch);
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	7a 81       	ldd	r23, Y+2	; 0x02
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1596:	cb 01       	movw	r24, r22
    1598:	0e 94 a7 08 	call	0x114e	; 0x114e <adjustPitch>
			adjustRoll((int)desiredRoll);
    159c:	c7 01       	movw	r24, r14
    159e:	b6 01       	movw	r22, r12
    15a0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    15a4:	cb 01       	movw	r24, r22
    15a6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <adjustRoll>
			
			// Check wind speed at regular intervals
			if (millis() - lastWindCheckTime >= WIND_CHECK_INTERVAL) {
    15aa:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	84 19       	sub	r24, r4
    15b4:	95 09       	sbc	r25, r5
    15b6:	a6 09       	sbc	r26, r6
    15b8:	b7 09       	sbc	r27, r7
    15ba:	88 3e       	cpi	r24, 0xE8	; 232
    15bc:	93 40       	sbci	r25, 0x03	; 3
    15be:	a1 05       	cpc	r26, r1
    15c0:	b1 05       	cpc	r27, r1
    15c2:	20 f1       	brcs	.+72     	; 0x160c <controlFigureEight+0x1aa>
				int currentWindSpeed = WindSensor_GetSpeed();
    15c4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <WindSensor_GetSpeed>
    15c8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    15cc:	7b 01       	movw	r14, r22
				lastWindCheckTime = millis();
    15ce:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    15d2:	2b 01       	movw	r4, r22
    15d4:	3c 01       	movw	r6, r24
				
				if (currentWindSpeed <= SOME_THRESHOLD) {
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	e8 16       	cp	r14, r24
    15da:	f1 04       	cpc	r15, r1
    15dc:	bc f4       	brge	.+46     	; 0x160c <controlFigureEight+0x1aa>
					// Wind speed too low, abort figure-eight maneuver
					LCD_Clear();
    15de:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
					LCD_Write_String((uint8_t*)"Wind too low");
    15e2:	8f ed       	ldi	r24, 0xDF	; 223
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
					LCD_Write_Command(0xC0);
    15ea:	80 ec       	ldi	r24, 0xC0	; 192
    15ec:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
					LCD_Write_String((uint8_t*)"Aborting Fig8");
    15f0:	8c ee       	ldi	r24, 0xEC	; 236
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	27 ea       	ldi	r18, 0xA7	; 167
    15fc:	31 e6       	ldi	r19, 0x61	; 97
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	20 40       	sbci	r18, 0x00	; 0
    1602:	30 40       	sbci	r19, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <controlFigureEight+0x19c>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <controlFigureEight+0x1a6>
    1608:	00 00       	nop
					_delay_ms(2000);
					return;  // Exit the function, ending the figure-eight maneuver
    160a:	79 c0       	rjmp	.+242    	; 0x16fe <controlFigureEight+0x29c>
				}
			}
			
			// Check altitude and send data if increased
			float pressure_hPa = BMP180_ReadPressure();
    160c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <BMP180_ReadPressure>
			int currentAltitude = BMP180_CalculateRelativeAltitude(pressure_hPa);
    1610:	0e 94 18 01 	call	0x230	; 0x230 <BMP180_CalculateRelativeAltitude>
    1614:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1618:	6b 01       	movw	r12, r22
    161a:	7c 01       	movw	r14, r24
			
			if (altitudeHasIncreased(currentAltitude, &previousAltitude))
    161c:	67 ec       	ldi	r22, 0xC7	; 199
    161e:	71 e0       	ldi	r23, 0x01	; 1
    1620:	c6 01       	movw	r24, r12
    1622:	0e 94 80 08 	call	0x1100	; 0x1100 <altitudeHasIncreased>
    1626:	89 2b       	or	r24, r25
    1628:	a1 f0       	breq	.+40     	; 0x1652 <controlFigureEight+0x1f0>
			{
				// Send data via HC-12
				UART_Tx_STR("i\r\n");
    162a:	8a ef       	ldi	r24, 0xFA	; 250
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <UART_Tx_STR>
				
				LCD_Clear();
    1632:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
				LCD_Write_String((uint8_t*)"Alt increased");
    1636:	8e ef       	ldi	r24, 0xFE	; 254
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	93 ed       	ldi	r25, 0xD3	; 211
    1642:	20 e3       	ldi	r18, 0x30	; 48
    1644:	81 50       	subi	r24, 0x01	; 1
    1646:	90 40       	sbci	r25, 0x00	; 0
    1648:	20 40       	sbci	r18, 0x00	; 0
    164a:	e1 f7       	brne	.-8      	; 0x1644 <controlFigureEight+0x1e2>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <controlFigureEight+0x1ec>
    164e:	00 00       	nop
    1650:	1a c0       	rjmp	.+52     	; 0x1686 <controlFigureEight+0x224>
				_delay_ms(1000);
				
			}else if (altitudeHasDecreased(currentAltitude, &previousAltitude))
    1652:	67 ec       	ldi	r22, 0xC7	; 199
    1654:	71 e0       	ldi	r23, 0x01	; 1
    1656:	c6 01       	movw	r24, r12
    1658:	0e 94 8e 08 	call	0x111c	; 0x111c <altitudeHasDecreased>
    165c:	89 2b       	or	r24, r25
    165e:	99 f0       	breq	.+38     	; 0x1686 <controlFigureEight+0x224>
			{
				// Send "decrease" via HC-12
				UART_Tx_STR("d\r\n");
    1660:	8c e0       	ldi	r24, 0x0C	; 12
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 5e 11 	call	0x22bc	; 0x22bc <UART_Tx_STR>
				
				LCD_Clear();
    1668:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
				LCD_Write_String((uint8_t*)"Alt decreased");
    166c:	80 e1       	ldi	r24, 0x10	; 16
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	83 ed       	ldi	r24, 0xD3	; 211
    1678:	90 e3       	ldi	r25, 0x30	; 48
    167a:	31 50       	subi	r19, 0x01	; 1
    167c:	80 40       	sbci	r24, 0x00	; 0
    167e:	90 40       	sbci	r25, 0x00	; 0
    1680:	e1 f7       	brne	.-8      	; 0x167a <controlFigureEight+0x218>
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <controlFigureEight+0x222>
    1684:	00 00       	nop
				_delay_ms(1000);
			}
			
			// Display sensor data
			displaySensorData();
    1686:	0e 94 b0 06 	call	0xd60	; 0xd60 <displaySensorData>
    168a:	2f ef       	ldi	r18, 0xFF	; 255
    168c:	31 ee       	ldi	r19, 0xE1	; 225
    168e:	84 e0       	ldi	r24, 0x04	; 4
    1690:	21 50       	subi	r18, 0x01	; 1
    1692:	30 40       	sbci	r19, 0x00	; 0
    1694:	80 40       	sbci	r24, 0x00	; 0
    1696:	e1 f7       	brne	.-8      	; 0x1690 <controlFigureEight+0x22e>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <controlFigureEight+0x238>
    169a:	00 00       	nop
		_delay_ms(2000);
		
		phaseStartTime = millis();
		
		// Execute the current phase for 5 seconds
		while (millis() - phaseStartTime < 5000) {
    169c:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	88 19       	sub	r24, r8
    16a6:	99 09       	sbc	r25, r9
    16a8:	aa 09       	sbc	r26, r10
    16aa:	bb 09       	sbc	r27, r11
    16ac:	88 38       	cpi	r24, 0x88	; 136
    16ae:	93 41       	sbci	r25, 0x13	; 19
    16b0:	a1 05       	cpc	r26, r1
    16b2:	b1 05       	cpc	r27, r1
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <controlFigureEight+0x256>
    16b6:	0b cf       	rjmp	.-490    	; 0x14ce <controlFigureEight+0x6c>
			
			_delay_ms(100);
		}
		
		// Switch phases
		currentPhase = (currentPhase == 1) ? 2 : 1;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	29 f4       	brne	.+10     	; 0x16ca <controlFigureEight+0x268>
    16c0:	22 e0       	ldi	r18, 0x02	; 2
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3e 83       	std	Y+6, r19	; 0x06
    16c6:	2d 83       	std	Y+5, r18	; 0x05
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <controlFigureEight+0x270>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
		
		// Display completion message if finishing phase 2
		if (currentPhase == 1) {
    16d2:	2d 81       	ldd	r18, Y+5	; 0x05
    16d4:	3e 81       	ldd	r19, Y+6	; 0x06
    16d6:	21 30       	cpi	r18, 0x01	; 1
    16d8:	31 05       	cpc	r19, r1
    16da:	09 f0       	breq	.+2      	; 0x16de <controlFigureEight+0x27c>
    16dc:	dc ce       	rjmp	.-584    	; 0x1496 <controlFigureEight+0x34>
			LCD_Clear();
    16de:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
			LCD_Write_String((uint8_t*)"Figure 8 Complete");
    16e2:	8e e1       	ldi	r24, 0x1E	; 30
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	87 ea       	ldi	r24, 0xA7	; 167
    16ee:	91 e6       	ldi	r25, 0x61	; 97
    16f0:	31 50       	subi	r19, 0x01	; 1
    16f2:	80 40       	sbci	r24, 0x00	; 0
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <controlFigureEight+0x28e>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <controlFigureEight+0x298>
    16fa:	00 00       	nop
    16fc:	cc ce       	rjmp	.-616    	; 0x1496 <controlFigureEight+0x34>
			_delay_ms(2000);
		}
	}
}
    16fe:	26 96       	adiw	r28, 0x06	; 6
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	08 95       	ret

00001728 <controlKite>:
 * Note            - Reads sensor data, displays it, and initiates figure-eight maneuver if conditions are met
 * ================================================================
 */

void controlKite()
{
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
	static int previousAltitude = 0;
	
	int currentPitch = MPU6050_Get_Pitch();
    1734:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <MPU6050_Get_Pitch>
    1738:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    173c:	6b 01       	movw	r12, r22
    173e:	7c 01       	movw	r14, r24
	LCD_Clear();
    1740:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Pitch: ");
    1744:	80 e3       	ldi	r24, 0x30	; 48
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(currentPitch);
    174c:	b6 01       	movw	r22, r12
    174e:	dd 0c       	add	r13, r13
    1750:	88 0b       	sbc	r24, r24
    1752:	99 0b       	sbc	r25, r25
    1754:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
	LCD_Write_String((uint8_t*)" deg");
    1758:	80 eb       	ldi	r24, 0xB0	; 176
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    1760:	2f ef       	ldi	r18, 0xFF	; 255
    1762:	83 ed       	ldi	r24, 0xD3	; 211
    1764:	90 e3       	ldi	r25, 0x30	; 48
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	80 40       	sbci	r24, 0x00	; 0
    176a:	90 40       	sbci	r25, 0x00	; 0
    176c:	e1 f7       	brne	.-8      	; 0x1766 <controlKite+0x3e>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <controlKite+0x48>
    1770:	00 00       	nop
	_delay_ms(1000);

	int currentRoll = MPU6050_Get_Roll();
    1772:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MPU6050_Get_Roll>
    1776:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    177a:	6b 01       	movw	r12, r22
    177c:	7c 01       	movw	r14, r24
	LCD_Clear();
    177e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Roll: ");
    1782:	88 e3       	ldi	r24, 0x38	; 56
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(currentRoll);
    178a:	b6 01       	movw	r22, r12
    178c:	dd 0c       	add	r13, r13
    178e:	88 0b       	sbc	r24, r24
    1790:	99 0b       	sbc	r25, r25
    1792:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
	LCD_Write_String((uint8_t*)" deg");
    1796:	80 eb       	ldi	r24, 0xB0	; 176
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    179e:	2f ef       	ldi	r18, 0xFF	; 255
    17a0:	83 ed       	ldi	r24, 0xD3	; 211
    17a2:	90 e3       	ldi	r25, 0x30	; 48
    17a4:	21 50       	subi	r18, 0x01	; 1
    17a6:	80 40       	sbci	r24, 0x00	; 0
    17a8:	90 40       	sbci	r25, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <controlKite+0x7c>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <controlKite+0x86>
    17ae:	00 00       	nop
	_delay_ms(1000);
	
	float temp = BMP180_ReadTemperature();
    17b0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <BMP180_ReadTemperature>
    17b4:	6b 01       	movw	r12, r22
    17b6:	7c 01       	movw	r14, r24
	LCD_Clear();
    17b8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Temp: ");
    17bc:	8f e3       	ldi	r24, 0x3F	; 63
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(temp);
    17c4:	c7 01       	movw	r24, r14
    17c6:	b6 01       	movw	r22, r12
    17c8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    17cc:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
	LCD_Write_String((uint8_t*)" c");
    17d0:	86 e4       	ldi	r24, 0x46	; 70
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    17d8:	2f ef       	ldi	r18, 0xFF	; 255
    17da:	83 ed       	ldi	r24, 0xD3	; 211
    17dc:	90 e3       	ldi	r25, 0x30	; 48
    17de:	21 50       	subi	r18, 0x01	; 1
    17e0:	80 40       	sbci	r24, 0x00	; 0
    17e2:	90 40       	sbci	r25, 0x00	; 0
    17e4:	e1 f7       	brne	.-8      	; 0x17de <controlKite+0xb6>
    17e6:	00 c0       	rjmp	.+0      	; 0x17e8 <controlKite+0xc0>
    17e8:	00 00       	nop
	_delay_ms(1000);
	
	float pressure_hPa = BMP180_ReadPressure();   // Read pressure to can read altitude from this equ:
    17ea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <BMP180_ReadPressure>
	                                              // alt = 44330 * [1-( pressure / pressure at sea level)^1/5.255] 
	
	int currentAltitude = BMP180_CalculateRelativeAltitude(pressure_hPa);
    17ee:	0e 94 18 01 	call	0x230	; 0x230 <BMP180_CalculateRelativeAltitude>
    17f2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    17f6:	6b 01       	movw	r12, r22
    17f8:	7c 01       	movw	r14, r24
	LCD_Clear();
    17fa:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Alt: ");
    17fe:	89 e4       	ldi	r24, 0x49	; 73
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(currentAltitude);
    1806:	b6 01       	movw	r22, r12
    1808:	0d 2c       	mov	r0, r13
    180a:	00 0c       	add	r0, r0
    180c:	88 0b       	sbc	r24, r24
    180e:	99 0b       	sbc	r25, r25
    1810:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
	LCD_Write_String((uint8_t*)" m");
    1814:	8f e4       	ldi	r24, 0x4F	; 79
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    181c:	2f ef       	ldi	r18, 0xFF	; 255
    181e:	83 ed       	ldi	r24, 0xD3	; 211
    1820:	90 e3       	ldi	r25, 0x30	; 48
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	80 40       	sbci	r24, 0x00	; 0
    1826:	90 40       	sbci	r25, 0x00	; 0
    1828:	e1 f7       	brne	.-8      	; 0x1822 <controlKite+0xfa>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <controlKite+0x104>
    182c:	00 00       	nop
	_delay_ms(1000);
	
	if (altitudeHasIncreased(currentAltitude, &previousAltitude))
    182e:	69 ec       	ldi	r22, 0xC9	; 201
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	c6 01       	movw	r24, r12
    1834:	0e 94 80 08 	call	0x1100	; 0x1100 <altitudeHasIncreased>
    1838:	89 2b       	or	r24, r25
    183a:	a1 f0       	breq	.+40     	; 0x1864 <controlKite+0x13c>
	 {
		// Send data via HC-12
		UART_Tx_STR("i\r\n");
    183c:	8a ef       	ldi	r24, 0xFA	; 250
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 5e 11 	call	0x22bc	; 0x22bc <UART_Tx_STR>
		
		LCD_Clear();
    1844:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
		LCD_Write_String((uint8_t*)"Data sent");
    1848:	82 e5       	ldi	r24, 0x52	; 82
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    1850:	2f ef       	ldi	r18, 0xFF	; 255
    1852:	83 ed       	ldi	r24, 0xD3	; 211
    1854:	90 e3       	ldi	r25, 0x30	; 48
    1856:	21 50       	subi	r18, 0x01	; 1
    1858:	80 40       	sbci	r24, 0x00	; 0
    185a:	90 40       	sbci	r25, 0x00	; 0
    185c:	e1 f7       	brne	.-8      	; 0x1856 <controlKite+0x12e>
    185e:	00 c0       	rjmp	.+0      	; 0x1860 <controlKite+0x138>
    1860:	00 00       	nop
    1862:	1a c0       	rjmp	.+52     	; 0x1898 <controlKite+0x170>
		_delay_ms(1000);
		
	}else if (altitudeHasDecreased(currentAltitude, &previousAltitude)) 
    1864:	69 ec       	ldi	r22, 0xC9	; 201
    1866:	71 e0       	ldi	r23, 0x01	; 1
    1868:	c6 01       	movw	r24, r12
    186a:	0e 94 8e 08 	call	0x111c	; 0x111c <altitudeHasDecreased>
    186e:	89 2b       	or	r24, r25
    1870:	99 f0       	breq	.+38     	; 0x1898 <controlKite+0x170>
	{
	// Send "data via HC-12
	UART_Tx_STR("d\r\n");
    1872:	8c e0       	ldi	r24, 0x0C	; 12
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 5e 11 	call	0x22bc	; 0x22bc <UART_Tx_STR>
	
	LCD_Clear();
    187a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Data sent");
    187e:	82 e5       	ldi	r24, 0x52	; 82
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    1886:	2f ef       	ldi	r18, 0xFF	; 255
    1888:	83 ed       	ldi	r24, 0xD3	; 211
    188a:	90 e3       	ldi	r25, 0x30	; 48
    188c:	21 50       	subi	r18, 0x01	; 1
    188e:	80 40       	sbci	r24, 0x00	; 0
    1890:	90 40       	sbci	r25, 0x00	; 0
    1892:	e1 f7       	brne	.-8      	; 0x188c <controlKite+0x164>
    1894:	00 c0       	rjmp	.+0      	; 0x1896 <controlKite+0x16e>
    1896:	00 00       	nop
	_delay_ms(1000);
    }
	
	int currentWindSpeed = WindSensor_GetSpeed();
    1898:	0e 94 6e 11 	call	0x22dc	; 0x22dc <WindSensor_GetSpeed>
    189c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    18a0:	6b 01       	movw	r12, r22
    18a2:	7c 01       	movw	r14, r24
    18a4:	eb 01       	movw	r28, r22
	LCD_Clear();
    18a6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((uint8_t*)"Wind: ");
    18aa:	8c e5       	ldi	r24, 0x5C	; 92
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(currentWindSpeed);
    18b2:	b6 01       	movw	r22, r12
    18b4:	dd 0c       	add	r13, r13
    18b6:	88 0b       	sbc	r24, r24
    18b8:	99 0b       	sbc	r25, r25
    18ba:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
	LCD_Write_String((uint8_t*)" m/s");
    18be:	83 e6       	ldi	r24, 0x63	; 99
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    18c6:	2f ef       	ldi	r18, 0xFF	; 255
    18c8:	83 ed       	ldi	r24, 0xD3	; 211
    18ca:	90 e3       	ldi	r25, 0x30	; 48
    18cc:	21 50       	subi	r18, 0x01	; 1
    18ce:	80 40       	sbci	r24, 0x00	; 0
    18d0:	90 40       	sbci	r25, 0x00	; 0
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <controlKite+0x1a4>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <controlKite+0x1ae>
    18d6:	00 00       	nop
	_delay_ms(1000);
	

	if (currentWindSpeed > SOME_THRESHOLD)
    18d8:	23 97       	sbiw	r28, 0x03	; 3
    18da:	54 f1       	brlt	.+84     	; 0x1930 <controlKite+0x208>
	{
		LCD_Clear();
    18dc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
		LCD_Write_String((uint8_t*)"Wind OK");
    18e0:	88 e6       	ldi	r24, 0x68	; 104
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0);  
    18e8:	80 ec       	ldi	r24, 0xC0	; 192
    18ea:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"Starting Fig_8");
    18ee:	80 e7       	ldi	r24, 0x70	; 112
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    18f6:	2f ef       	ldi	r18, 0xFF	; 255
    18f8:	87 ea       	ldi	r24, 0xA7	; 167
    18fa:	91 e6       	ldi	r25, 0x61	; 97
    18fc:	21 50       	subi	r18, 0x01	; 1
    18fe:	80 40       	sbci	r24, 0x00	; 0
    1900:	90 40       	sbci	r25, 0x00	; 0
    1902:	e1 f7       	brne	.-8      	; 0x18fc <controlKite+0x1d4>
    1904:	00 c0       	rjmp	.+0      	; 0x1906 <controlKite+0x1de>
    1906:	00 00       	nop
		_delay_ms(2000);
		
		if (!startTimeInitialized) {
    1908:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <startTimeInitialized>
    190c:	81 11       	cpse	r24, r1
    190e:	0d c0       	rjmp	.+26     	; 0x192a <controlKite+0x202>
			figureEightStartTime = millis();
    1910:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    1914:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <figureEightStartTime>
    1918:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <figureEightStartTime+0x1>
    191c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <figureEightStartTime+0x2>
    1920:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <figureEightStartTime+0x3>
			startTimeInitialized = true;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <startTimeInitialized>
		}
		
		controlFigureEight();
    192a:	0e 94 31 0a 	call	0x1462	; 0x1462 <controlFigureEight>
    192e:	16 c0       	rjmp	.+44     	; 0x195c <controlKite+0x234>
	}
	else
	{
		LCD_Clear();
    1930:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
		LCD_Write_String((uint8_t*)"Wind too low");
    1934:	8f ed       	ldi	r24, 0xDF	; 223
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
		LCD_Write_Command(0xC0);  
    193c:	80 ec       	ldi	r24, 0xC0	; 192
    193e:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
		LCD_Write_String((uint8_t*)"Waiting...");
    1942:	8f e7       	ldi	r24, 0x7F	; 127
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    194a:	2f ef       	ldi	r18, 0xFF	; 255
    194c:	83 ed       	ldi	r24, 0xD3	; 211
    194e:	90 e3       	ldi	r25, 0x30	; 48
    1950:	21 50       	subi	r18, 0x01	; 1
    1952:	80 40       	sbci	r24, 0x00	; 0
    1954:	90 40       	sbci	r25, 0x00	; 0
    1956:	e1 f7       	brne	.-8      	; 0x1950 <controlKite+0x228>
    1958:	00 c0       	rjmp	.+0      	; 0x195a <controlKite+0x232>
    195a:	00 00       	nop
		_delay_ms(1000);
	}

}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	08 95       	ret

0000196a <timer1_init>:
 * ================================================================
 */

void timer1_init() {
	// Configure Timer1 for CTC mode
	TCCR1B |= (1 << WGM12);
    196a:	8e b5       	in	r24, 0x2e	; 46
    196c:	88 60       	ori	r24, 0x08	; 8
    196e:	8e bd       	out	0x2e, r24	; 46
	// Set compare value for 1ms at 16MHz clock with prescaler 64
	OCR1A = 249;
    1970:	89 ef       	ldi	r24, 0xF9	; 249
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9b bd       	out	0x2b, r25	; 43
    1976:	8a bd       	out	0x2a, r24	; 42
	// Enable compare interrupt
	TIMSK |= (1 << OCIE1A);
    1978:	89 b7       	in	r24, 0x39	; 57
    197a:	80 61       	ori	r24, 0x10	; 16
    197c:	89 bf       	out	0x39, r24	; 57
	// Start timer with prescaler 64
	TCCR1B |= (1 << CS11) | (1 << CS10);
    197e:	8e b5       	in	r24, 0x2e	; 46
    1980:	83 60       	ori	r24, 0x03	; 3
    1982:	8e bd       	out	0x2e, r24	; 46
    1984:	08 95       	ret

00001986 <__vector_7>:
 * @retval         - None
 * Note            - Increments milliseconds counter every 1ms
 * ================================================================
 */

ISR(TIMER1_COMPA_vect) {
    1986:	1f 92       	push	r1
    1988:	0f 92       	push	r0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
	milliseconds++;
    1998:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <milliseconds>
    199c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <milliseconds+0x1>
    19a0:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <milliseconds+0x2>
    19a4:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <milliseconds+0x3>
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	b1 1d       	adc	r27, r1
    19ae:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <milliseconds>
    19b2:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <milliseconds+0x1>
    19b6:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <milliseconds+0x2>
    19ba:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <milliseconds+0x3>
}
    19be:	bf 91       	pop	r27
    19c0:	af 91       	pop	r26
    19c2:	9f 91       	pop	r25
    19c4:	8f 91       	pop	r24
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <display_error>:
 * Note            - Clears LCD and displays "Error: " followed by the error code
 * ================================================================
 */

void display_error(Uint8t error_code) 
{
    19d0:	cf 93       	push	r28
    19d2:	c8 2f       	mov	r28, r24
	LCD_Clear();
    19d4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>
	LCD_Write_String((Uint8t*)"Error: ");
    19d8:	8a e8       	ldi	r24, 0x8A	; 138
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Number(error_code);
    19e0:	6c 2f       	mov	r22, r28
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_Write_Number>
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	87 ea       	ldi	r24, 0xA7	; 167
    19f0:	91 e6       	ldi	r25, 0x61	; 97
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	80 40       	sbci	r24, 0x00	; 0
    19f6:	90 40       	sbci	r25, 0x00	; 0
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <display_error+0x22>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <display_error+0x2c>
    19fc:	00 00       	nop
	_delay_ms(2000);
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <main>:
int main() {

	uint16_t temperature;
	char buffer[16];
	
	UART_Init();  // Initialize UART for HC-12 communication
    1a02:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART_Init>
	StepperMotor_Init();
    1a06:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <StepperMotor_Init>
	WindSensor_Init();
    1a0a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <WindSensor_Init>
	LCD_Init();
    1a0e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_Init>

	int8_t init_result = BMP180_Init(BMP180_STANDARD);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BMP180_Init>
    1a18:	2f ef       	ldi	r18, 0xFF	; 255
    1a1a:	83 ed       	ldi	r24, 0xD3	; 211
    1a1c:	90 e3       	ldi	r25, 0x30	; 48
    1a1e:	21 50       	subi	r18, 0x01	; 1
    1a20:	80 40       	sbci	r24, 0x00	; 0
    1a22:	90 40       	sbci	r25, 0x00	; 0
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <main+0x1c>
    1a26:	00 c0       	rjmp	.+0      	; 0x1a28 <main+0x26>
    1a28:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
    1a2a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_Clear>

	float referencePressure = BMP180_ReadPressure();
    1a2e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <BMP180_ReadPressure>
	BMP180_SetReferencePressure(referencePressure);
    1a32:	0e 94 0f 01 	call	0x21e	; 0x21e <BMP180_SetReferencePressure>

	float pitch, roll;
	Uint8t error_code;

	I2C_Init(100000);
    1a36:	60 ea       	ldi	r22, 0xA0	; 160
    1a38:	76 e8       	ldi	r23, 0x86	; 134
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 63 05 	call	0xac6	; 0xac6 <I2C_Init>
	error_code = MPU6050_Init();
    1a42:	0e 94 57 0d 	call	0x1aae	; 0x1aae <MPU6050_Init>
	if (error_code != 0) {
    1a46:	88 23       	and	r24, r24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <main+0x4e>
	display_error(error_code);
    1a4a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <display_error>
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <main+0x4c>
	while(1);
}

	MPU6050_Calibrate();
    1a50:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <MPU6050_Calibrate>

	LCD_Write_String((uint8_t*)"   Kite Power ");
    1a54:	82 e9       	ldi	r24, 0x92	; 146
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
	LCD_Write_Command(0xC0);
    1a5c:	80 ec       	ldi	r24, 0xC0	; 192
    1a5e:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_Write_Command>
	LCD_Write_String((uint8_t*)"     System   ");
    1a62:	81 ea       	ldi	r24, 0xA1	; 161
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LCD_Write_String>
    1a6a:	2f ef       	ldi	r18, 0xFF	; 255
    1a6c:	83 ed       	ldi	r24, 0xD3	; 211
    1a6e:	90 e3       	ldi	r25, 0x30	; 48
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	80 40       	sbci	r24, 0x00	; 0
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	e1 f7       	brne	.-8      	; 0x1a70 <main+0x6e>
    1a78:	00 c0       	rjmp	.+0      	; 0x1a7a <main+0x78>
    1a7a:	00 00       	nop
	_delay_ms(1000);
	

	// Initialize Timer1 for millis()
	timer1_init();
    1a7c:	0e 94 b5 0c 	call	0x196a	; 0x196a <timer1_init>

	// Enable global interrupts
	sei();
    1a80:	78 94       	sei
	
	last_time = millis();
    1a82:	0e 94 9c 08 	call	0x1138	; 0x1138 <millis>
    1a86:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <last_time>
    1a8a:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <last_time+0x1>
    1a8e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <last_time+0x2>
    1a92:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <last_time+0x3>


	while (1) {
		controlKite();
    1a96:	0e 94 94 0b 	call	0x1728	; 0x1728 <controlKite>
    1a9a:	2f ef       	ldi	r18, 0xFF	; 255
    1a9c:	81 ee       	ldi	r24, 0xE1	; 225
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	21 50       	subi	r18, 0x01	; 1
    1aa2:	80 40       	sbci	r24, 0x00	; 0
    1aa4:	90 40       	sbci	r25, 0x00	; 0
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <main+0x9e>
    1aa8:	00 c0       	rjmp	.+0      	; 0x1aaa <main+0xa8>
    1aaa:	00 00       	nop
    1aac:	f4 cf       	rjmp	.-24     	; 0x1a96 <main+0x94>

00001aae <MPU6050_Init>:
	float accel_z = az / 16384.0;
	
	// Calculate pitch and roll
	*pitch = atan2(-accel_x, sqrt(accel_y*accel_y + accel_z*accel_z)) * 180.0 / M_PI;
	*roll = atan2(accel_y, accel_z) * 180.0 / M_PI;
}
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	88 e6       	ldi	r24, 0x68	; 104
    1ab2:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <MPU6050_Init+0x48>
    1aba:	8b e6       	ldi	r24, 0x6B	; 107
    1abc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	1b c0       	rjmp	.+54     	; 0x1afa <MPU6050_Init+0x4c>
    1ac4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	19 c0       	rjmp	.+50     	; 0x1afe <MPU6050_Init+0x50>
    1acc:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	88 e6       	ldi	r24, 0x68	; 104
    1ad4:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	13 c0       	rjmp	.+38     	; 0x1b02 <MPU6050_Init+0x54>
    1adc:	8b e1       	ldi	r24, 0x1B	; 27
    1ade:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
    1ae2:	81 11       	cpse	r24, r1
    1ae4:	10 c0       	rjmp	.+32     	; 0x1b06 <MPU6050_Init+0x58>
    1ae6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
    1aea:	81 11       	cpse	r24, r1
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <MPU6050_Init+0x5c>
    1aee:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	08 95       	ret
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	08 95       	ret
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	08 95       	ret
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	08 95       	ret
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	08 95       	ret
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	08 95       	ret
    1b0a:	86 e0       	ldi	r24, 0x06	; 6
    1b0c:	08 95       	ret

00001b0e <MPU6050_Read_Accel>:
    1b0e:	7f 92       	push	r7
    1b10:	8f 92       	push	r8
    1b12:	9f 92       	push	r9
    1b14:	af 92       	push	r10
    1b16:	bf 92       	push	r11
    1b18:	cf 92       	push	r12
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <MPU6050_Read_Accel+0x1c>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <MPU6050_Read_Accel+0x1e>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <MPU6050_Read_Accel+0x20>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	6c 01       	movw	r12, r24
    1b34:	7b 01       	movw	r14, r22
    1b36:	8a 01       	movw	r16, r20
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	88 e6       	ldi	r24, 0x68	; 104
    1b3c:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
    1b40:	81 11       	cpse	r24, r1
    1b42:	75 c0       	rjmp	.+234    	; 0x1c2e <MPU6050_Read_Accel+0x120>
    1b44:	8b e3       	ldi	r24, 0x3B	; 59
    1b46:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_Write>
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	72 c0       	rjmp	.+228    	; 0x1c32 <MPU6050_Read_Accel+0x124>
    1b4e:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	88 e6       	ldi	r24, 0x68	; 104
    1b56:	0e 94 67 05 	call	0xace	; 0xace <I2C_Start>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	6c c0       	rjmp	.+216    	; 0x1c36 <MPU6050_Read_Accel+0x128>
    1b5e:	a1 2c       	mov	r10, r1
    1b60:	b1 2c       	mov	r11, r1
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <MPU6050_Read_Accel+0x70>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_Read>
    1b6a:	e1 e0       	ldi	r30, 0x01	; 1
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	ec 0f       	add	r30, r28
    1b70:	fd 1f       	adc	r31, r29
    1b72:	ea 0d       	add	r30, r10
    1b74:	fb 1d       	adc	r31, r11
    1b76:	80 83       	st	Z, r24
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	a8 1a       	sub	r10, r24
    1b7c:	b8 0a       	sbc	r11, r24
    1b7e:	e5 e0       	ldi	r30, 0x05	; 5
    1b80:	ae 16       	cp	r10, r30
    1b82:	b1 04       	cpc	r11, r1
    1b84:	7c f3       	brlt	.-34     	; 0x1b64 <MPU6050_Read_Accel+0x56>
    1b86:	0e 94 a7 05 	call	0xb4e	; 0xb4e <I2C_ReadNack>
    1b8a:	78 2e       	mov	r7, r24
    1b8c:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Stop>
    1b90:	89 80       	ldd	r8, Y+1	; 0x01
    1b92:	91 2c       	mov	r9, r1
    1b94:	98 2c       	mov	r9, r8
    1b96:	88 24       	eor	r8, r8
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	88 2a       	or	r8, r24
    1b9c:	0f 2e       	mov	r0, r31
    1b9e:	f8 ee       	ldi	r31, 0xE8	; 232
    1ba0:	af 2e       	mov	r10, r31
    1ba2:	f1 e0       	ldi	r31, 0x01	; 1
    1ba4:	bf 2e       	mov	r11, r31
    1ba6:	f0 2d       	mov	r31, r0
    1ba8:	f5 01       	movw	r30, r10
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	56 e4       	ldi	r21, 0x46	; 70
    1bba:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1bbe:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1bc2:	86 1a       	sub	r8, r22
    1bc4:	97 0a       	sbc	r9, r23
    1bc6:	f6 01       	movw	r30, r12
    1bc8:	91 82       	std	Z+1, r9	; 0x01
    1bca:	80 82       	st	Z, r8
    1bcc:	cb 80       	ldd	r12, Y+3	; 0x03
    1bce:	d1 2c       	mov	r13, r1
    1bd0:	dc 2c       	mov	r13, r12
    1bd2:	cc 24       	eor	r12, r12
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	c8 2a       	or	r12, r24
    1bd8:	f5 01       	movw	r30, r10
    1bda:	64 81       	ldd	r22, Z+4	; 0x04
    1bdc:	75 81       	ldd	r23, Z+5	; 0x05
    1bde:	86 81       	ldd	r24, Z+6	; 0x06
    1be0:	97 81       	ldd	r25, Z+7	; 0x07
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	56 e4       	ldi	r21, 0x46	; 70
    1bea:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1bee:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1bf2:	c6 1a       	sub	r12, r22
    1bf4:	d7 0a       	sbc	r13, r23
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	d1 82       	std	Z+1, r13	; 0x01
    1bfa:	c0 82       	st	Z, r12
    1bfc:	ed 80       	ldd	r14, Y+5	; 0x05
    1bfe:	f1 2c       	mov	r15, r1
    1c00:	fe 2c       	mov	r15, r14
    1c02:	ee 24       	eor	r14, r14
    1c04:	e7 28       	or	r14, r7
    1c06:	f5 01       	movw	r30, r10
    1c08:	60 85       	ldd	r22, Z+8	; 0x08
    1c0a:	71 85       	ldd	r23, Z+9	; 0x09
    1c0c:	82 85       	ldd	r24, Z+10	; 0x0a
    1c0e:	93 85       	ldd	r25, Z+11	; 0x0b
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	56 e4       	ldi	r21, 0x46	; 70
    1c18:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1c1c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1c20:	e6 1a       	sub	r14, r22
    1c22:	f7 0a       	sbc	r15, r23
    1c24:	f8 01       	movw	r30, r16
    1c26:	f1 82       	std	Z+1, r15	; 0x01
    1c28:	e0 82       	st	Z, r14
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <MPU6050_Read_Accel+0x12a>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <MPU6050_Read_Accel+0x12a>
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <MPU6050_Read_Accel+0x12a>
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	26 96       	adiw	r28, 0x06	; 6
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	cf 90       	pop	r12
    1c54:	bf 90       	pop	r11
    1c56:	af 90       	pop	r10
    1c58:	9f 90       	pop	r9
    1c5a:	8f 90       	pop	r8
    1c5c:	7f 90       	pop	r7
    1c5e:	08 95       	ret

00001c60 <MPU6050_Get_Pitch>:

float MPU6050_Get_Pitch(void) {
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <MPU6050_Get_Pitch+0xe>
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <MPU6050_Get_Pitch+0x10>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <MPU6050_Get_Pitch+0x12>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	int16_t ax, ay, az;
	MPU6050_Read_Accel(&ax, &ay, &az);
    1c76:	ae 01       	movw	r20, r28
    1c78:	4b 5f       	subi	r20, 0xFB	; 251
    1c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7c:	be 01       	movw	r22, r28
    1c7e:	6d 5f       	subi	r22, 0xFD	; 253
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	ce 01       	movw	r24, r28
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <MPU6050_Read_Accel>
	
	// Convert raw values to g forces
	float accel_x = ax / 16384.0;
    1c8a:	69 81       	ldd	r22, Y+1	; 0x01
    1c8c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c8e:	07 2e       	mov	r0, r23
    1c90:	00 0c       	add	r0, r0
    1c92:	88 0b       	sbc	r24, r24
    1c94:	99 0b       	sbc	r25, r25
    1c96:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	58 e3       	ldi	r21, 0x38	; 56
    1ca2:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1ca6:	6b 01       	movw	r12, r22
    1ca8:	7c 01       	movw	r14, r24
	float accel_z = az / 16384.0;
    1caa:	6d 81       	ldd	r22, Y+5	; 0x05
    1cac:	7e 81       	ldd	r23, Y+6	; 0x06
    1cae:	07 2e       	mov	r0, r23
    1cb0:	00 0c       	add	r0, r0
    1cb2:	88 0b       	sbc	r24, r24
    1cb4:	99 0b       	sbc	r25, r25
    1cb6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	58 e3       	ldi	r21, 0x38	; 56
    1cc2:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1cc6:	9b 01       	movw	r18, r22
    1cc8:	ac 01       	movw	r20, r24
	
	// Calculate pitch
	float pitch = atan2(-accel_x, accel_z) * 180.0 / M_PI;
    1cca:	c7 01       	movw	r24, r14
    1ccc:	b6 01       	movw	r22, r12
    1cce:	90 58       	subi	r25, 0x80	; 128
    1cd0:	0e 94 1e 12 	call	0x243c	; 0x243c <atan2>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	44 e3       	ldi	r20, 0x34	; 52
    1cda:	53 e4       	ldi	r21, 0x43	; 67
    1cdc:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1ce0:	2b ed       	ldi	r18, 0xDB	; 219
    1ce2:	3f e0       	ldi	r19, 0x0F	; 15
    1ce4:	49 e4       	ldi	r20, 0x49	; 73
    1ce6:	50 e4       	ldi	r21, 0x40	; 64
    1ce8:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
	
	return pitch;
}
    1cec:	26 96       	adiw	r28, 0x06	; 6
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret

00001d06 <MPU6050_Get_Roll>:

float MPU6050_Get_Roll(void) {
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <MPU6050_Get_Roll+0xe>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <MPU6050_Get_Roll+0x10>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <MPU6050_Get_Roll+0x12>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	int16_t ax, ay, az;
	MPU6050_Read_Accel(&ax, &ay, &az);
    1d1c:	ae 01       	movw	r20, r28
    1d1e:	4b 5f       	subi	r20, 0xFB	; 251
    1d20:	5f 4f       	sbci	r21, 0xFF	; 255
    1d22:	be 01       	movw	r22, r28
    1d24:	6d 5f       	subi	r22, 0xFD	; 253
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	ce 01       	movw	r24, r28
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <MPU6050_Read_Accel>
	
	// Convert raw values to g forces
	float accel_y = ay / 16384.0;
    1d30:	6b 81       	ldd	r22, Y+3	; 0x03
    1d32:	7c 81       	ldd	r23, Y+4	; 0x04
    1d34:	07 2e       	mov	r0, r23
    1d36:	00 0c       	add	r0, r0
    1d38:	88 0b       	sbc	r24, r24
    1d3a:	99 0b       	sbc	r25, r25
    1d3c:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	58 e3       	ldi	r21, 0x38	; 56
    1d48:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1d4c:	6b 01       	movw	r12, r22
    1d4e:	7c 01       	movw	r14, r24
	float accel_z = az / 16384.0;
    1d50:	6d 81       	ldd	r22, Y+5	; 0x05
    1d52:	7e 81       	ldd	r23, Y+6	; 0x06
    1d54:	07 2e       	mov	r0, r23
    1d56:	00 0c       	add	r0, r0
    1d58:	88 0b       	sbc	r24, r24
    1d5a:	99 0b       	sbc	r25, r25
    1d5c:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	58 e3       	ldi	r21, 0x38	; 56
    1d68:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1d6c:	9b 01       	movw	r18, r22
    1d6e:	ac 01       	movw	r20, r24
	
	// Calculate roll
	float roll = atan2(accel_y, accel_z) * 180.0 / M_PI;
    1d70:	c7 01       	movw	r24, r14
    1d72:	b6 01       	movw	r22, r12
    1d74:	0e 94 1e 12 	call	0x243c	; 0x243c <atan2>
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	44 e3       	ldi	r20, 0x34	; 52
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1d84:	2b ed       	ldi	r18, 0xDB	; 219
    1d86:	3f e0       	ldi	r19, 0x0F	; 15
    1d88:	49 e4       	ldi	r20, 0x49	; 73
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
	
	return roll;
}
    1d90:	26 96       	adiw	r28, 0x06	; 6
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	08 95       	ret

00001daa <MPU6050_Calibrate>:
//
void MPU6050_Calibrate(void) {
    1daa:	4f 92       	push	r4
    1dac:	5f 92       	push	r5
    1dae:	6f 92       	push	r6
    1db0:	7f 92       	push	r7
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	cf 92       	push	r12
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2c 97       	sbiw	r28, 0x0c	; 12
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
	float ax, ay, az;
	
	//LCD_Clear();
	//LCD_Write_String((Uint8t*)"Calibrating...");
	
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
	
	return roll;
}
//
void MPU6050_Calibrate(void) {
	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
    1dde:	c1 2c       	mov	r12, r1
    1de0:	d1 2c       	mov	r13, r1
    1de2:	76 01       	movw	r14, r12
    1de4:	81 2c       	mov	r8, r1
    1de6:	91 2c       	mov	r9, r1
    1de8:	54 01       	movw	r10, r8
    1dea:	41 2c       	mov	r4, r1
    1dec:	51 2c       	mov	r5, r1
    1dee:	32 01       	movw	r6, r4
	float ax, ay, az;
	
	//LCD_Clear();
	//LCD_Write_String((Uint8t*)"Calibrating...");
	
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
    1df0:	42 c0       	rjmp	.+132    	; 0x1e76 <MPU6050_Calibrate+0xcc>
		MPU6050_Read_Accel(&ax, &ay, &az);
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5f       	subi	r20, 0xF7	; 247
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	be 01       	movw	r22, r28
    1dfa:	6b 5f       	subi	r22, 0xFB	; 251
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <MPU6050_Read_Accel>
		x_sum += (int32_t)(ax * 16384.0);
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	56 e4       	ldi	r21, 0x46	; 70
    1e0e:	69 81       	ldd	r22, Y+1	; 0x01
    1e10:	7a 81       	ldd	r23, Y+2	; 0x02
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1e1a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1e1e:	46 0e       	add	r4, r22
    1e20:	57 1e       	adc	r5, r23
    1e22:	68 1e       	adc	r6, r24
    1e24:	79 1e       	adc	r7, r25
		y_sum += (int32_t)(ay * 16384.0);
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	56 e4       	ldi	r21, 0x46	; 70
    1e2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e30:	7e 81       	ldd	r23, Y+6	; 0x06
    1e32:	8f 81       	ldd	r24, Y+7	; 0x07
    1e34:	98 85       	ldd	r25, Y+8	; 0x08
    1e36:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1e3a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1e3e:	86 0e       	add	r8, r22
    1e40:	97 1e       	adc	r9, r23
    1e42:	a8 1e       	adc	r10, r24
    1e44:	b9 1e       	adc	r11, r25
		z_sum += (int32_t)(az * 16384.0);
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	56 e4       	ldi	r21, 0x46	; 70
    1e4e:	69 85       	ldd	r22, Y+9	; 0x09
    1e50:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e56:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1e5a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1e5e:	c6 0e       	add	r12, r22
    1e60:	d7 1e       	adc	r13, r23
    1e62:	e8 1e       	adc	r14, r24
    1e64:	f9 1e       	adc	r15, r25
    1e66:	8f e3       	ldi	r24, 0x3F	; 63
    1e68:	9c e9       	ldi	r25, 0x9C	; 156
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <MPU6050_Calibrate+0xc0>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <MPU6050_Calibrate+0xc6>
    1e70:	00 00       	nop
	float ax, ay, az;
	
	//LCD_Clear();
	//LCD_Write_String((Uint8t*)"Calibrating...");
	
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	04 36       	cpi	r16, 0x64	; 100
    1e78:	11 05       	cpc	r17, r1
    1e7a:	0c f4       	brge	.+2      	; 0x1e7e <MPU6050_Calibrate+0xd4>
    1e7c:	ba cf       	rjmp	.-140    	; 0x1df2 <MPU6050_Calibrate+0x48>
		y_sum += (int32_t)(ay * 16384.0);
		z_sum += (int32_t)(az * 16384.0);
		_delay_ms(10);
	}
	
	calibration.x_offset = (float)x_sum / CALIBRATION_SAMPLES / 16384.0;
    1e7e:	c3 01       	movw	r24, r6
    1e80:	b2 01       	movw	r22, r4
    1e82:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	48 ec       	ldi	r20, 0xC8	; 200
    1e8c:	52 e4       	ldi	r21, 0x42	; 66
    1e8e:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	58 e3       	ldi	r21, 0x38	; 56
    1e9a:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1e9e:	08 ee       	ldi	r16, 0xE8	; 232
    1ea0:	11 e0       	ldi	r17, 0x01	; 1
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	60 83       	st	Z, r22
    1ea6:	71 83       	std	Z+1, r23	; 0x01
    1ea8:	82 83       	std	Z+2, r24	; 0x02
    1eaa:	93 83       	std	Z+3, r25	; 0x03
	calibration.y_offset = (float)y_sum / CALIBRATION_SAMPLES / 16384.0;
    1eac:	c5 01       	movw	r24, r10
    1eae:	b4 01       	movw	r22, r8
    1eb0:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	48 ec       	ldi	r20, 0xC8	; 200
    1eba:	52 e4       	ldi	r21, 0x42	; 66
    1ebc:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	58 e3       	ldi	r21, 0x38	; 56
    1ec8:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1ecc:	f8 01       	movw	r30, r16
    1ece:	64 83       	std	Z+4, r22	; 0x04
    1ed0:	75 83       	std	Z+5, r23	; 0x05
    1ed2:	86 83       	std	Z+6, r24	; 0x06
    1ed4:	97 83       	std	Z+7, r25	; 0x07
	calibration.z_offset = (float)z_sum / CALIBRATION_SAMPLES / 16384.0 - 1.0; // Assuming Z-axis is vertical
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	48 ec       	ldi	r20, 0xC8	; 200
    1ee4:	52 e4       	ldi	r21, 0x42	; 66
    1ee6:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	58 e3       	ldi	r21, 0x38	; 56
    1ef2:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 9e 11 	call	0x233c	; 0x233c <__subsf3>
    1f02:	f8 01       	movw	r30, r16
    1f04:	60 87       	std	Z+8, r22	; 0x08
    1f06:	71 87       	std	Z+9, r23	; 0x09
    1f08:	82 87       	std	Z+10, r24	; 0x0a
    1f0a:	93 87       	std	Z+11, r25	; 0x0b
	
	//LCD_Clear();
	//LCD_Write_String((Uint8t*)"Calibration done");
	//_delay_ms(1000);
    1f0c:	2c 96       	adiw	r28, 0x0c	; 12
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	bf 90       	pop	r11
    1f2a:	af 90       	pop	r10
    1f2c:	9f 90       	pop	r9
    1f2e:	8f 90       	pop	r8
    1f30:	7f 90       	pop	r7
    1f32:	6f 90       	pop	r6
    1f34:	5f 90       	pop	r5
    1f36:	4f 90       	pop	r4
    1f38:	08 95       	ret

00001f3a <StepperMotor_Init>:

#include "SM.h"

void StepperMotor_Init(void)
{
	DIO_SetPin_Direction(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_OUTPUT);
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	63 e0       	ldi	r22, 0x03	; 3
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_OUTPUT);
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	64 e0       	ldi	r22, 0x04	; 4
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_OUTPUT);
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_OUTPUT);
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	66 e0       	ldi	r22, 0x06	; 6
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	0e 94 81 04 	call	0x902	; 0x902 <DIO_SetPin_Direction>
    1f62:	08 95       	ret

00001f64 <StepperMotor_RotateClockwise>:
}

void StepperMotor_RotateClockwise(uint16_t period, uint16_t steps)
{
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
    1f72:	7b 01       	movw	r14, r22
	for (uint16_t i = 0; i < steps; i++)
    1f74:	00 e0       	ldi	r16, 0x00	; 0
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    1f78:	ba c0       	rjmp	.+372    	; 0x20ee <StepperMotor_RotateClockwise+0x18a>
	{
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	63 e0       	ldi	r22, 0x03	; 3
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	64 e0       	ldi	r22, 0x04	; 4
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	65 e0       	ldi	r22, 0x05	; 5
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	66 e0       	ldi	r22, 0x06	; 6
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	63 e0       	ldi	r22, 0x03	; 3
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	65 e0       	ldi	r22, 0x05	; 5
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	66 e0       	ldi	r22, 0x06	; 6
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	63 e0       	ldi	r22, 0x03	; 3
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	65 e0       	ldi	r22, 0x05	; 5
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	66 e0       	ldi	r22, 0x06	; 6
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    1ffe:	ce 01       	movw	r24, r28
    2000:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	63 e0       	ldi	r22, 0x03	; 3
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	65 e0       	ldi	r22, 0x05	; 5
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	66 e0       	ldi	r22, 0x06	; 6
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    202c:	ce 01       	movw	r24, r28
    202e:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	64 e0       	ldi	r22, 0x04	; 4
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	65 e0       	ldi	r22, 0x05	; 5
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	66 e0       	ldi	r22, 0x06	; 6
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    205a:	ce 01       	movw	r24, r28
    205c:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	65 e0       	ldi	r22, 0x05	; 5
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	66 e0       	ldi	r22, 0x06	; 6
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2088:	ce 01       	movw	r24, r28
    208a:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	65 e0       	ldi	r22, 0x05	; 5
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    20b6:	ce 01       	movw	r24, r28
    20b8:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	63 e0       	ldi	r22, 0x03	; 3
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	64 e0       	ldi	r22, 0x04	; 4
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	65 e0       	ldi	r22, 0x05	; 5
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	66 e0       	ldi	r22, 0x06	; 6
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    20e4:	ce 01       	movw	r24, r28
    20e6:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
	DIO_SetPin_Direction(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_OUTPUT);
}

void StepperMotor_RotateClockwise(uint16_t period, uint16_t steps)
{
	for (uint16_t i = 0; i < steps; i++)
    20ea:	0f 5f       	subi	r16, 0xFF	; 255
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	0e 15       	cp	r16, r14
    20f0:	1f 05       	cpc	r17, r15
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <StepperMotor_RotateClockwise+0x192>
    20f4:	42 cf       	rjmp	.-380    	; 0x1f7a <StepperMotor_RotateClockwise+0x16>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
		delay_ms(period);
	}
}
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	08 95       	ret

00002104 <StepperMotor_RotateAnticlockwise>:

void StepperMotor_RotateAnticlockwise(uint16_t period, uint16_t steps)
{
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	ec 01       	movw	r28, r24
    2112:	7b 01       	movw	r14, r22
	for (uint16_t i = 0; i < steps; i++)
    2114:	00 e0       	ldi	r16, 0x00	; 0
    2116:	10 e0       	ldi	r17, 0x00	; 0
    2118:	ba c0       	rjmp	.+372    	; 0x228e <StepperMotor_RotateAnticlockwise+0x18a>
	{
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	63 e0       	ldi	r22, 0x03	; 3
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	64 e0       	ldi	r22, 0x04	; 4
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	65 e0       	ldi	r22, 0x05	; 5
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	66 e0       	ldi	r22, 0x06	; 6
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2142:	ce 01       	movw	r24, r28
    2144:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	63 e0       	ldi	r22, 0x03	; 3
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	64 e0       	ldi	r22, 0x04	; 4
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	66 e0       	ldi	r22, 0x06	; 6
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2170:	ce 01       	movw	r24, r28
    2172:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	63 e0       	ldi	r22, 0x03	; 3
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	65 e0       	ldi	r22, 0x05	; 5
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_HIGH);
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    219e:	ce 01       	movw	r24, r28
    21a0:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
		
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	63 e0       	ldi	r22, 0x03	; 3
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	64 e0       	ldi	r22, 0x04	; 4
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	65 e0       	ldi	r22, 0x05	; 5
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	66 e0       	ldi	r22, 0x06	; 6
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    21cc:	ce 01       	movw	r24, r28
    21ce:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
		
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	64 e0       	ldi	r22, 0x04	; 4
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_HIGH);
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	65 e0       	ldi	r22, 0x05	; 5
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	66 e0       	ldi	r22, 0x06	; 6
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_LOW);
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	63 e0       	ldi	r22, 0x03	; 3
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	64 e0       	ldi	r22, 0x04	; 4
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	65 e0       	ldi	r22, 0x05	; 5
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	66 e0       	ldi	r22, 0x06	; 6
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	63 e0       	ldi	r22, 0x03	; 3
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_HIGH);
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	64 e0       	ldi	r22, 0x04	; 4
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	65 e0       	ldi	r22, 0x05	; 5
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	66 e0       	ldi	r22, 0x06	; 6
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2256:	ce 01       	movw	r24, r28
    2258:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>

		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN1, DIO_PIN_HIGH);
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	63 e0       	ldi	r22, 0x03	; 3
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	65 e0       	ldi	r22, 0x05	; 5
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_SetPin_Value>
		delay_ms(period);
    2284:	ce 01       	movw	r24, r28
    2286:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
	}
}

void StepperMotor_RotateAnticlockwise(uint16_t period, uint16_t steps)
{
	for (uint16_t i = 0; i < steps; i++)
    228a:	0f 5f       	subi	r16, 0xFF	; 255
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	0e 15       	cp	r16, r14
    2290:	1f 05       	cpc	r17, r15
    2292:	08 f4       	brcc	.+2      	; 0x2296 <StepperMotor_RotateAnticlockwise+0x192>
    2294:	42 cf       	rjmp	.-380    	; 0x211a <StepperMotor_RotateAnticlockwise+0x16>
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN2, DIO_PIN_LOW);
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN3, DIO_PIN_LOW);
		DIO_SetPin_Value(STEPPER_PORT, STEPPER_PIN4, DIO_PIN_LOW);
		delay_ms(period);
	}
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	08 95       	ret

000022a4 <UART_Init>:

UART_STATUS UART_Receive_Data(uint8_t* data) {
	while (!(UCSRA & (1 << RXC)));
	*data = UDR;
	return UART_OK;
}
    22a4:	88 e1       	ldi	r24, 0x18	; 24
    22a6:	8a b9       	out	0x0a, r24	; 10
    22a8:	86 e8       	ldi	r24, 0x86	; 134
    22aa:	80 bd       	out	0x20, r24	; 32
    22ac:	87 e6       	ldi	r24, 0x67	; 103
    22ae:	89 b9       	out	0x09, r24	; 9
    22b0:	10 bc       	out	0x20, r1	; 32
    22b2:	08 95       	ret

000022b4 <UART_Tx>:
    22b4:	5d 9b       	sbis	0x0b, 5	; 11
    22b6:	fe cf       	rjmp	.-4      	; 0x22b4 <UART_Tx>
    22b8:	8c b9       	out	0x0c, r24	; 12
    22ba:	08 95       	ret

000022bc <UART_Tx_STR>:

void UART_Tx_STR(const char* str) {
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	ec 01       	movw	r28, r24
	while (*str) {
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <UART_Tx_STR+0xe>
		UART_Tx(*str++);
    22c4:	21 96       	adiw	r28, 0x01	; 1
    22c6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <UART_Tx>
	*data = UDR;
	return UART_OK;
}

void UART_Tx_STR(const char* str) {
	while (*str) {
    22ca:	88 81       	ld	r24, Y
    22cc:	81 11       	cpse	r24, r1
    22ce:	fa cf       	rjmp	.-12     	; 0x22c4 <UART_Tx_STR+0x8>
		UART_Tx(*str++);
	}
}
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <WindSensor_Init>:
#include "LCD.h"

void WindSensor_Init(void)
{
    // Initialize ADC for wind sensor reading
    ADC_Init();
    22d6:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_Init>
    22da:	08 95       	ret

000022dc <WindSensor_GetSpeed>:
}

float WindSensor_GetSpeed(void)
{
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    Uint16t adc_reading = ADC_Read();
    22e4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ADC_Read>
    
    // Convert ADC reading to voltage
    float voltage = (float)adc_reading * (5.0f / 1023.0f);  
    22e8:	bc 01       	movw	r22, r24
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    22f2:	2a e0       	ldi	r18, 0x0A	; 10
    22f4:	38 e2       	ldi	r19, 0x28	; 40
    22f6:	40 ea       	ldi	r20, 0xA0	; 160
    22f8:	5b e3       	ldi	r21, 0x3B	; 59
    22fa:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    
    // Convert voltage to wind speed (m/s)
    float windSpeed = (voltage - WIND_SENSOR_OFFSET) / WIND_SENSOR_SLOPE;
    22fe:	2a e0       	ldi	r18, 0x0A	; 10
    2300:	37 ed       	ldi	r19, 0xD7	; 215
    2302:	43 e2       	ldi	r20, 0x23	; 35
    2304:	5c e3       	ldi	r21, 0x3C	; 60
    2306:	0e 94 9e 11 	call	0x233c	; 0x233c <__subsf3>
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	37 ed       	ldi	r19, 0xD7	; 215
    230e:	43 e2       	ldi	r20, 0x23	; 35
    2310:	5d e3       	ldi	r21, 0x3D	; 61
    2312:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    2316:	6b 01       	movw	r12, r22
    2318:	7c 01       	movw	r14, r24
    
    // Ensure non-negative wind speed
    if (windSpeed < 0) windSpeed = 0;
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	a9 01       	movw	r20, r18
    2320:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    2324:	88 23       	and	r24, r24
    2326:	1c f4       	brge	.+6      	; 0x232e <WindSensor_GetSpeed+0x52>
    2328:	c1 2c       	mov	r12, r1
    232a:	d1 2c       	mov	r13, r1
    232c:	76 01       	movw	r14, r12
    
    return windSpeed;
}
    232e:	c7 01       	movw	r24, r14
    2330:	b6 01       	movw	r22, r12
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	df 90       	pop	r13
    2338:	cf 90       	pop	r12
    233a:	08 95       	ret

0000233c <__subsf3>:
    233c:	50 58       	subi	r21, 0x80	; 128

0000233e <__addsf3>:
    233e:	bb 27       	eor	r27, r27
    2340:	aa 27       	eor	r26, r26
    2342:	0e 94 b6 11 	call	0x236c	; 0x236c <__addsf3x>
    2346:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    234a:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    234e:	38 f0       	brcs	.+14     	; 0x235e <__addsf3+0x20>
    2350:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2354:	20 f0       	brcs	.+8      	; 0x235e <__addsf3+0x20>
    2356:	39 f4       	brne	.+14     	; 0x2366 <__addsf3+0x28>
    2358:	9f 3f       	cpi	r25, 0xFF	; 255
    235a:	19 f4       	brne	.+6      	; 0x2362 <__addsf3+0x24>
    235c:	26 f4       	brtc	.+8      	; 0x2366 <__addsf3+0x28>
    235e:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    2362:	0e f4       	brtc	.+2      	; 0x2366 <__addsf3+0x28>
    2364:	e0 95       	com	r30
    2366:	e7 fb       	bst	r30, 7
    2368:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>

0000236c <__addsf3x>:
    236c:	e9 2f       	mov	r30, r25
    236e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    2372:	58 f3       	brcs	.-42     	; 0x234a <__addsf3+0xc>
    2374:	ba 17       	cp	r27, r26
    2376:	62 07       	cpc	r22, r18
    2378:	73 07       	cpc	r23, r19
    237a:	84 07       	cpc	r24, r20
    237c:	95 07       	cpc	r25, r21
    237e:	20 f0       	brcs	.+8      	; 0x2388 <__addsf3x+0x1c>
    2380:	79 f4       	brne	.+30     	; 0x23a0 <__addsf3x+0x34>
    2382:	a6 f5       	brtc	.+104    	; 0x23ec <__addsf3x+0x80>
    2384:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>
    2388:	0e f4       	brtc	.+2      	; 0x238c <__addsf3x+0x20>
    238a:	e0 95       	com	r30
    238c:	0b 2e       	mov	r0, r27
    238e:	ba 2f       	mov	r27, r26
    2390:	a0 2d       	mov	r26, r0
    2392:	0b 01       	movw	r0, r22
    2394:	b9 01       	movw	r22, r18
    2396:	90 01       	movw	r18, r0
    2398:	0c 01       	movw	r0, r24
    239a:	ca 01       	movw	r24, r20
    239c:	a0 01       	movw	r20, r0
    239e:	11 24       	eor	r1, r1
    23a0:	ff 27       	eor	r31, r31
    23a2:	59 1b       	sub	r21, r25
    23a4:	99 f0       	breq	.+38     	; 0x23cc <__addsf3x+0x60>
    23a6:	59 3f       	cpi	r21, 0xF9	; 249
    23a8:	50 f4       	brcc	.+20     	; 0x23be <__addsf3x+0x52>
    23aa:	50 3e       	cpi	r21, 0xE0	; 224
    23ac:	68 f1       	brcs	.+90     	; 0x2408 <__addsf3x+0x9c>
    23ae:	1a 16       	cp	r1, r26
    23b0:	f0 40       	sbci	r31, 0x00	; 0
    23b2:	a2 2f       	mov	r26, r18
    23b4:	23 2f       	mov	r18, r19
    23b6:	34 2f       	mov	r19, r20
    23b8:	44 27       	eor	r20, r20
    23ba:	58 5f       	subi	r21, 0xF8	; 248
    23bc:	f3 cf       	rjmp	.-26     	; 0x23a4 <__addsf3x+0x38>
    23be:	46 95       	lsr	r20
    23c0:	37 95       	ror	r19
    23c2:	27 95       	ror	r18
    23c4:	a7 95       	ror	r26
    23c6:	f0 40       	sbci	r31, 0x00	; 0
    23c8:	53 95       	inc	r21
    23ca:	c9 f7       	brne	.-14     	; 0x23be <__addsf3x+0x52>
    23cc:	7e f4       	brtc	.+30     	; 0x23ec <__addsf3x+0x80>
    23ce:	1f 16       	cp	r1, r31
    23d0:	ba 0b       	sbc	r27, r26
    23d2:	62 0b       	sbc	r22, r18
    23d4:	73 0b       	sbc	r23, r19
    23d6:	84 0b       	sbc	r24, r20
    23d8:	ba f0       	brmi	.+46     	; 0x2408 <__addsf3x+0x9c>
    23da:	91 50       	subi	r25, 0x01	; 1
    23dc:	a1 f0       	breq	.+40     	; 0x2406 <__addsf3x+0x9a>
    23de:	ff 0f       	add	r31, r31
    23e0:	bb 1f       	adc	r27, r27
    23e2:	66 1f       	adc	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	c2 f7       	brpl	.-16     	; 0x23da <__addsf3x+0x6e>
    23ea:	0e c0       	rjmp	.+28     	; 0x2408 <__addsf3x+0x9c>
    23ec:	ba 0f       	add	r27, r26
    23ee:	62 1f       	adc	r22, r18
    23f0:	73 1f       	adc	r23, r19
    23f2:	84 1f       	adc	r24, r20
    23f4:	48 f4       	brcc	.+18     	; 0x2408 <__addsf3x+0x9c>
    23f6:	87 95       	ror	r24
    23f8:	77 95       	ror	r23
    23fa:	67 95       	ror	r22
    23fc:	b7 95       	ror	r27
    23fe:	f7 95       	ror	r31
    2400:	9e 3f       	cpi	r25, 0xFE	; 254
    2402:	08 f0       	brcs	.+2      	; 0x2406 <__addsf3x+0x9a>
    2404:	b0 cf       	rjmp	.-160    	; 0x2366 <__addsf3+0x28>
    2406:	93 95       	inc	r25
    2408:	88 0f       	add	r24, r24
    240a:	08 f0       	brcs	.+2      	; 0x240e <__addsf3x+0xa2>
    240c:	99 27       	eor	r25, r25
    240e:	ee 0f       	add	r30, r30
    2410:	97 95       	ror	r25
    2412:	87 95       	ror	r24
    2414:	08 95       	ret
    2416:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    241a:	60 f0       	brcs	.+24     	; 0x2434 <__addsf3x+0xc8>
    241c:	80 e8       	ldi	r24, 0x80	; 128
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	09 f4       	brne	.+2      	; 0x2424 <__addsf3x+0xb8>
    2422:	9e ef       	ldi	r25, 0xFE	; 254
    2424:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2428:	28 f0       	brcs	.+10     	; 0x2434 <__addsf3x+0xc8>
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	51 e0       	ldi	r21, 0x01	; 1
    242e:	71 f4       	brne	.+28     	; 0x244c <atan2+0x10>
    2430:	5e ef       	ldi	r21, 0xFE	; 254
    2432:	0c c0       	rjmp	.+24     	; 0x244c <atan2+0x10>
    2434:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    2438:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>

0000243c <atan2>:
    243c:	e9 2f       	mov	r30, r25
    243e:	e0 78       	andi	r30, 0x80	; 128
    2440:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    2444:	40 f3       	brcs	.-48     	; 0x2416 <__addsf3x+0xaa>
    2446:	09 2e       	mov	r0, r25
    2448:	05 2a       	or	r0, r21
    244a:	b1 f3       	breq	.-20     	; 0x2438 <__addsf3x+0xcc>
    244c:	26 17       	cp	r18, r22
    244e:	37 07       	cpc	r19, r23
    2450:	48 07       	cpc	r20, r24
    2452:	59 07       	cpc	r21, r25
    2454:	38 f0       	brcs	.+14     	; 0x2464 <atan2+0x28>
    2456:	0e 2e       	mov	r0, r30
    2458:	07 f8       	bld	r0, 7
    245a:	e0 25       	eor	r30, r0
    245c:	69 f0       	breq	.+26     	; 0x2478 <atan2+0x3c>
    245e:	e0 25       	eor	r30, r0
    2460:	e0 64       	ori	r30, 0x40	; 64
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <atan2+0x3c>
    2464:	ef 63       	ori	r30, 0x3F	; 63
    2466:	07 f8       	bld	r0, 7
    2468:	00 94       	com	r0
    246a:	07 fa       	bst	r0, 7
    246c:	db 01       	movw	r26, r22
    246e:	b9 01       	movw	r22, r18
    2470:	9d 01       	movw	r18, r26
    2472:	dc 01       	movw	r26, r24
    2474:	ca 01       	movw	r24, r20
    2476:	ad 01       	movw	r20, r26
    2478:	ef 93       	push	r30
    247a:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3_pse>
    247e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fp_round>
    2482:	0e 94 4e 12 	call	0x249c	; 0x249c <atan>
    2486:	5f 91       	pop	r21
    2488:	55 23       	and	r21, r21
    248a:	39 f0       	breq	.+14     	; 0x249a <atan2+0x5e>
    248c:	2b ed       	ldi	r18, 0xDB	; 219
    248e:	3f e0       	ldi	r19, 0x0F	; 15
    2490:	49 e4       	ldi	r20, 0x49	; 73
    2492:	50 fd       	sbrc	r21, 0
    2494:	49 ec       	ldi	r20, 0xC9	; 201
    2496:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__addsf3>
    249a:	08 95       	ret

0000249c <atan>:
    249c:	df 93       	push	r29
    249e:	dd 27       	eor	r29, r29
    24a0:	b9 2f       	mov	r27, r25
    24a2:	bf 77       	andi	r27, 0x7F	; 127
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	16 16       	cp	r1, r22
    24aa:	17 06       	cpc	r1, r23
    24ac:	48 07       	cpc	r20, r24
    24ae:	5b 07       	cpc	r21, r27
    24b0:	18 f4       	brcc	.+6      	; 0x24b8 <atan+0x1c>
    24b2:	d9 2f       	mov	r29, r25
    24b4:	0e 94 08 14 	call	0x2810	; 0x2810 <inverse>
    24b8:	9f 93       	push	r25
    24ba:	8f 93       	push	r24
    24bc:	7f 93       	push	r23
    24be:	6f 93       	push	r22
    24c0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <square>
    24c4:	e4 e5       	ldi	r30, 0x54	; 84
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_powser>
    24cc:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fp_round>
    24d0:	2f 91       	pop	r18
    24d2:	3f 91       	pop	r19
    24d4:	4f 91       	pop	r20
    24d6:	5f 91       	pop	r21
    24d8:	0e 94 23 14 	call	0x2846	; 0x2846 <__mulsf3x>
    24dc:	dd 23       	and	r29, r29
    24de:	51 f0       	breq	.+20     	; 0x24f4 <atan+0x58>
    24e0:	90 58       	subi	r25, 0x80	; 128
    24e2:	a2 ea       	ldi	r26, 0xA2	; 162
    24e4:	2a ed       	ldi	r18, 0xDA	; 218
    24e6:	3f e0       	ldi	r19, 0x0F	; 15
    24e8:	49 ec       	ldi	r20, 0xC9	; 201
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	d0 78       	andi	r29, 0x80	; 128
    24ee:	5d 27       	eor	r21, r29
    24f0:	0e 94 b6 11 	call	0x236c	; 0x236c <__addsf3x>
    24f4:	df 91       	pop	r29
    24f6:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>

000024fa <__cmpsf2>:
    24fa:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_cmp>
    24fe:	08 f4       	brcc	.+2      	; 0x2502 <__cmpsf2+0x8>
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	08 95       	ret

00002504 <__divsf3>:
    2504:	0e 94 96 12 	call	0x252c	; 0x252c <__divsf3x>
    2508:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    250c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2510:	58 f0       	brcs	.+22     	; 0x2528 <__divsf3+0x24>
    2512:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    2516:	40 f0       	brcs	.+16     	; 0x2528 <__divsf3+0x24>
    2518:	29 f4       	brne	.+10     	; 0x2524 <__divsf3+0x20>
    251a:	5f 3f       	cpi	r21, 0xFF	; 255
    251c:	29 f0       	breq	.+10     	; 0x2528 <__divsf3+0x24>
    251e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    2522:	51 11       	cpse	r21, r1
    2524:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    2528:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>

0000252c <__divsf3x>:
    252c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    2530:	68 f3       	brcs	.-38     	; 0x250c <__divsf3+0x8>

00002532 <__divsf3_pse>:
    2532:	99 23       	and	r25, r25
    2534:	b1 f3       	breq	.-20     	; 0x2522 <__divsf3+0x1e>
    2536:	55 23       	and	r21, r21
    2538:	91 f3       	breq	.-28     	; 0x251e <__divsf3+0x1a>
    253a:	95 1b       	sub	r25, r21
    253c:	55 0b       	sbc	r21, r21
    253e:	bb 27       	eor	r27, r27
    2540:	aa 27       	eor	r26, r26
    2542:	62 17       	cp	r22, r18
    2544:	73 07       	cpc	r23, r19
    2546:	84 07       	cpc	r24, r20
    2548:	38 f0       	brcs	.+14     	; 0x2558 <__divsf3_pse+0x26>
    254a:	9f 5f       	subi	r25, 0xFF	; 255
    254c:	5f 4f       	sbci	r21, 0xFF	; 255
    254e:	22 0f       	add	r18, r18
    2550:	33 1f       	adc	r19, r19
    2552:	44 1f       	adc	r20, r20
    2554:	aa 1f       	adc	r26, r26
    2556:	a9 f3       	breq	.-22     	; 0x2542 <__divsf3_pse+0x10>
    2558:	35 d0       	rcall	.+106    	; 0x25c4 <__divsf3_pse+0x92>
    255a:	0e 2e       	mov	r0, r30
    255c:	3a f0       	brmi	.+14     	; 0x256c <__divsf3_pse+0x3a>
    255e:	e0 e8       	ldi	r30, 0x80	; 128
    2560:	32 d0       	rcall	.+100    	; 0x25c6 <__divsf3_pse+0x94>
    2562:	91 50       	subi	r25, 0x01	; 1
    2564:	50 40       	sbci	r21, 0x00	; 0
    2566:	e6 95       	lsr	r30
    2568:	00 1c       	adc	r0, r0
    256a:	ca f7       	brpl	.-14     	; 0x255e <__divsf3_pse+0x2c>
    256c:	2b d0       	rcall	.+86     	; 0x25c4 <__divsf3_pse+0x92>
    256e:	fe 2f       	mov	r31, r30
    2570:	29 d0       	rcall	.+82     	; 0x25c4 <__divsf3_pse+0x92>
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	88 1f       	adc	r24, r24
    2578:	bb 1f       	adc	r27, r27
    257a:	26 17       	cp	r18, r22
    257c:	37 07       	cpc	r19, r23
    257e:	48 07       	cpc	r20, r24
    2580:	ab 07       	cpc	r26, r27
    2582:	b0 e8       	ldi	r27, 0x80	; 128
    2584:	09 f0       	breq	.+2      	; 0x2588 <__divsf3_pse+0x56>
    2586:	bb 0b       	sbc	r27, r27
    2588:	80 2d       	mov	r24, r0
    258a:	bf 01       	movw	r22, r30
    258c:	ff 27       	eor	r31, r31
    258e:	93 58       	subi	r25, 0x83	; 131
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	3a f0       	brmi	.+14     	; 0x25a2 <__divsf3_pse+0x70>
    2594:	9e 3f       	cpi	r25, 0xFE	; 254
    2596:	51 05       	cpc	r21, r1
    2598:	78 f0       	brcs	.+30     	; 0x25b8 <__divsf3_pse+0x86>
    259a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    259e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    25a2:	5f 3f       	cpi	r21, 0xFF	; 255
    25a4:	e4 f3       	brlt	.-8      	; 0x259e <__divsf3_pse+0x6c>
    25a6:	98 3e       	cpi	r25, 0xE8	; 232
    25a8:	d4 f3       	brlt	.-12     	; 0x259e <__divsf3_pse+0x6c>
    25aa:	86 95       	lsr	r24
    25ac:	77 95       	ror	r23
    25ae:	67 95       	ror	r22
    25b0:	b7 95       	ror	r27
    25b2:	f7 95       	ror	r31
    25b4:	9f 5f       	subi	r25, 0xFF	; 255
    25b6:	c9 f7       	brne	.-14     	; 0x25aa <__divsf3_pse+0x78>
    25b8:	88 0f       	add	r24, r24
    25ba:	91 1d       	adc	r25, r1
    25bc:	96 95       	lsr	r25
    25be:	87 95       	ror	r24
    25c0:	97 f9       	bld	r25, 7
    25c2:	08 95       	ret
    25c4:	e1 e0       	ldi	r30, 0x01	; 1
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	88 1f       	adc	r24, r24
    25cc:	bb 1f       	adc	r27, r27
    25ce:	62 17       	cp	r22, r18
    25d0:	73 07       	cpc	r23, r19
    25d2:	84 07       	cpc	r24, r20
    25d4:	ba 07       	cpc	r27, r26
    25d6:	20 f0       	brcs	.+8      	; 0x25e0 <__divsf3_pse+0xae>
    25d8:	62 1b       	sub	r22, r18
    25da:	73 0b       	sbc	r23, r19
    25dc:	84 0b       	sbc	r24, r20
    25de:	ba 0b       	sbc	r27, r26
    25e0:	ee 1f       	adc	r30, r30
    25e2:	88 f7       	brcc	.-30     	; 0x25c6 <__divsf3_pse+0x94>
    25e4:	e0 95       	com	r30
    25e6:	08 95       	ret

000025e8 <__fixsfsi>:
    25e8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    25ec:	68 94       	set
    25ee:	b1 11       	cpse	r27, r1
    25f0:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    25f4:	08 95       	ret

000025f6 <__fixunssfsi>:
    25f6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    25fa:	88 f0       	brcs	.+34     	; 0x261e <__fixunssfsi+0x28>
    25fc:	9f 57       	subi	r25, 0x7F	; 127
    25fe:	98 f0       	brcs	.+38     	; 0x2626 <__fixunssfsi+0x30>
    2600:	b9 2f       	mov	r27, r25
    2602:	99 27       	eor	r25, r25
    2604:	b7 51       	subi	r27, 0x17	; 23
    2606:	b0 f0       	brcs	.+44     	; 0x2634 <__fixunssfsi+0x3e>
    2608:	e1 f0       	breq	.+56     	; 0x2642 <__fixunssfsi+0x4c>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a f0       	brmi	.+6      	; 0x261a <__fixunssfsi+0x24>
    2614:	ba 95       	dec	r27
    2616:	c9 f7       	brne	.-14     	; 0x260a <__fixunssfsi+0x14>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <__fixunssfsi+0x4c>
    261a:	b1 30       	cpi	r27, 0x01	; 1
    261c:	91 f0       	breq	.+36     	; 0x2642 <__fixunssfsi+0x4c>
    261e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fp_zero>
    2622:	b1 e0       	ldi	r27, 0x01	; 1
    2624:	08 95       	ret
    2626:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>
    262a:	67 2f       	mov	r22, r23
    262c:	78 2f       	mov	r23, r24
    262e:	88 27       	eor	r24, r24
    2630:	b8 5f       	subi	r27, 0xF8	; 248
    2632:	39 f0       	breq	.+14     	; 0x2642 <__fixunssfsi+0x4c>
    2634:	b9 3f       	cpi	r27, 0xF9	; 249
    2636:	cc f3       	brlt	.-14     	; 0x262a <__fixunssfsi+0x34>
    2638:	86 95       	lsr	r24
    263a:	77 95       	ror	r23
    263c:	67 95       	ror	r22
    263e:	b3 95       	inc	r27
    2640:	d9 f7       	brne	.-10     	; 0x2638 <__fixunssfsi+0x42>
    2642:	3e f4       	brtc	.+14     	; 0x2652 <__fixunssfsi+0x5c>
    2644:	90 95       	com	r25
    2646:	80 95       	com	r24
    2648:	70 95       	com	r23
    264a:	61 95       	neg	r22
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	08 95       	ret

00002654 <__floatunsisf>:
    2654:	e8 94       	clt
    2656:	09 c0       	rjmp	.+18     	; 0x266a <__floatsisf+0x12>

00002658 <__floatsisf>:
    2658:	97 fb       	bst	r25, 7
    265a:	3e f4       	brtc	.+14     	; 0x266a <__floatsisf+0x12>
    265c:	90 95       	com	r25
    265e:	80 95       	com	r24
    2660:	70 95       	com	r23
    2662:	61 95       	neg	r22
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	8f 4f       	sbci	r24, 0xFF	; 255
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	99 23       	and	r25, r25
    266c:	a9 f0       	breq	.+42     	; 0x2698 <__floatsisf+0x40>
    266e:	f9 2f       	mov	r31, r25
    2670:	96 e9       	ldi	r25, 0x96	; 150
    2672:	bb 27       	eor	r27, r27
    2674:	93 95       	inc	r25
    2676:	f6 95       	lsr	r31
    2678:	87 95       	ror	r24
    267a:	77 95       	ror	r23
    267c:	67 95       	ror	r22
    267e:	b7 95       	ror	r27
    2680:	f1 11       	cpse	r31, r1
    2682:	f8 cf       	rjmp	.-16     	; 0x2674 <__floatsisf+0x1c>
    2684:	fa f4       	brpl	.+62     	; 0x26c4 <__floatsisf+0x6c>
    2686:	bb 0f       	add	r27, r27
    2688:	11 f4       	brne	.+4      	; 0x268e <__floatsisf+0x36>
    268a:	60 ff       	sbrs	r22, 0
    268c:	1b c0       	rjmp	.+54     	; 0x26c4 <__floatsisf+0x6c>
    268e:	6f 5f       	subi	r22, 0xFF	; 255
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	16 c0       	rjmp	.+44     	; 0x26c4 <__floatsisf+0x6c>
    2698:	88 23       	and	r24, r24
    269a:	11 f0       	breq	.+4      	; 0x26a0 <__floatsisf+0x48>
    269c:	96 e9       	ldi	r25, 0x96	; 150
    269e:	11 c0       	rjmp	.+34     	; 0x26c2 <__floatsisf+0x6a>
    26a0:	77 23       	and	r23, r23
    26a2:	21 f0       	breq	.+8      	; 0x26ac <__floatsisf+0x54>
    26a4:	9e e8       	ldi	r25, 0x8E	; 142
    26a6:	87 2f       	mov	r24, r23
    26a8:	76 2f       	mov	r23, r22
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <__floatsisf+0x5e>
    26ac:	66 23       	and	r22, r22
    26ae:	71 f0       	breq	.+28     	; 0x26cc <__floatsisf+0x74>
    26b0:	96 e8       	ldi	r25, 0x86	; 134
    26b2:	86 2f       	mov	r24, r22
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	2a f0       	brmi	.+10     	; 0x26c4 <__floatsisf+0x6c>
    26ba:	9a 95       	dec	r25
    26bc:	66 0f       	add	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	da f7       	brpl	.-10     	; 0x26ba <__floatsisf+0x62>
    26c4:	88 0f       	add	r24, r24
    26c6:	96 95       	lsr	r25
    26c8:	87 95       	ror	r24
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret

000026ce <__fp_cmp>:
    26ce:	99 0f       	add	r25, r25
    26d0:	00 08       	sbc	r0, r0
    26d2:	55 0f       	add	r21, r21
    26d4:	aa 0b       	sbc	r26, r26
    26d6:	e0 e8       	ldi	r30, 0x80	; 128
    26d8:	fe ef       	ldi	r31, 0xFE	; 254
    26da:	16 16       	cp	r1, r22
    26dc:	17 06       	cpc	r1, r23
    26de:	e8 07       	cpc	r30, r24
    26e0:	f9 07       	cpc	r31, r25
    26e2:	c0 f0       	brcs	.+48     	; 0x2714 <__fp_cmp+0x46>
    26e4:	12 16       	cp	r1, r18
    26e6:	13 06       	cpc	r1, r19
    26e8:	e4 07       	cpc	r30, r20
    26ea:	f5 07       	cpc	r31, r21
    26ec:	98 f0       	brcs	.+38     	; 0x2714 <__fp_cmp+0x46>
    26ee:	62 1b       	sub	r22, r18
    26f0:	73 0b       	sbc	r23, r19
    26f2:	84 0b       	sbc	r24, r20
    26f4:	95 0b       	sbc	r25, r21
    26f6:	39 f4       	brne	.+14     	; 0x2706 <__fp_cmp+0x38>
    26f8:	0a 26       	eor	r0, r26
    26fa:	61 f0       	breq	.+24     	; 0x2714 <__fp_cmp+0x46>
    26fc:	23 2b       	or	r18, r19
    26fe:	24 2b       	or	r18, r20
    2700:	25 2b       	or	r18, r21
    2702:	21 f4       	brne	.+8      	; 0x270c <__fp_cmp+0x3e>
    2704:	08 95       	ret
    2706:	0a 26       	eor	r0, r26
    2708:	09 f4       	brne	.+2      	; 0x270c <__fp_cmp+0x3e>
    270a:	a1 40       	sbci	r26, 0x01	; 1
    270c:	a6 95       	lsr	r26
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	81 1d       	adc	r24, r1
    2712:	81 1d       	adc	r24, r1
    2714:	08 95       	ret

00002716 <__fp_inf>:
    2716:	97 f9       	bld	r25, 7
    2718:	9f 67       	ori	r25, 0x7F	; 127
    271a:	80 e8       	ldi	r24, 0x80	; 128
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	08 95       	ret

00002722 <__fp_nan>:
    2722:	9f ef       	ldi	r25, 0xFF	; 255
    2724:	80 ec       	ldi	r24, 0xC0	; 192
    2726:	08 95       	ret

00002728 <__fp_powser>:
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	1f 93       	push	r17
    272e:	0f 93       	push	r16
    2730:	ff 92       	push	r15
    2732:	ef 92       	push	r14
    2734:	df 92       	push	r13
    2736:	7b 01       	movw	r14, r22
    2738:	8c 01       	movw	r16, r24
    273a:	68 94       	set
    273c:	06 c0       	rjmp	.+12     	; 0x274a <__fp_powser+0x22>
    273e:	da 2e       	mov	r13, r26
    2740:	ef 01       	movw	r28, r30
    2742:	0e 94 23 14 	call	0x2846	; 0x2846 <__mulsf3x>
    2746:	fe 01       	movw	r30, r28
    2748:	e8 94       	clt
    274a:	a5 91       	lpm	r26, Z+
    274c:	25 91       	lpm	r18, Z+
    274e:	35 91       	lpm	r19, Z+
    2750:	45 91       	lpm	r20, Z+
    2752:	55 91       	lpm	r21, Z+
    2754:	a6 f3       	brts	.-24     	; 0x273e <__fp_powser+0x16>
    2756:	ef 01       	movw	r28, r30
    2758:	0e 94 b6 11 	call	0x236c	; 0x236c <__addsf3x>
    275c:	fe 01       	movw	r30, r28
    275e:	97 01       	movw	r18, r14
    2760:	a8 01       	movw	r20, r16
    2762:	da 94       	dec	r13
    2764:	69 f7       	brne	.-38     	; 0x2740 <__fp_powser+0x18>
    2766:	df 90       	pop	r13
    2768:	ef 90       	pop	r14
    276a:	ff 90       	pop	r15
    276c:	0f 91       	pop	r16
    276e:	1f 91       	pop	r17
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <__fp_pscA>:
    2776:	00 24       	eor	r0, r0
    2778:	0a 94       	dec	r0
    277a:	16 16       	cp	r1, r22
    277c:	17 06       	cpc	r1, r23
    277e:	18 06       	cpc	r1, r24
    2780:	09 06       	cpc	r0, r25
    2782:	08 95       	ret

00002784 <__fp_pscB>:
    2784:	00 24       	eor	r0, r0
    2786:	0a 94       	dec	r0
    2788:	12 16       	cp	r1, r18
    278a:	13 06       	cpc	r1, r19
    278c:	14 06       	cpc	r1, r20
    278e:	05 06       	cpc	r0, r21
    2790:	08 95       	ret

00002792 <__fp_round>:
    2792:	09 2e       	mov	r0, r25
    2794:	03 94       	inc	r0
    2796:	00 0c       	add	r0, r0
    2798:	11 f4       	brne	.+4      	; 0x279e <__fp_round+0xc>
    279a:	88 23       	and	r24, r24
    279c:	52 f0       	brmi	.+20     	; 0x27b2 <__fp_round+0x20>
    279e:	bb 0f       	add	r27, r27
    27a0:	40 f4       	brcc	.+16     	; 0x27b2 <__fp_round+0x20>
    27a2:	bf 2b       	or	r27, r31
    27a4:	11 f4       	brne	.+4      	; 0x27aa <__fp_round+0x18>
    27a6:	60 ff       	sbrs	r22, 0
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <__fp_round+0x20>
    27aa:	6f 5f       	subi	r22, 0xFF	; 255
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	08 95       	ret

000027b4 <__fp_split3>:
    27b4:	57 fd       	sbrc	r21, 7
    27b6:	90 58       	subi	r25, 0x80	; 128
    27b8:	44 0f       	add	r20, r20
    27ba:	55 1f       	adc	r21, r21
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <__fp_splitA+0x10>
    27be:	5f 3f       	cpi	r21, 0xFF	; 255
    27c0:	71 f0       	breq	.+28     	; 0x27de <__fp_splitA+0x1a>
    27c2:	47 95       	ror	r20

000027c4 <__fp_splitA>:
    27c4:	88 0f       	add	r24, r24
    27c6:	97 fb       	bst	r25, 7
    27c8:	99 1f       	adc	r25, r25
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <__fp_splitA+0x20>
    27cc:	9f 3f       	cpi	r25, 0xFF	; 255
    27ce:	79 f0       	breq	.+30     	; 0x27ee <__fp_splitA+0x2a>
    27d0:	87 95       	ror	r24
    27d2:	08 95       	ret
    27d4:	12 16       	cp	r1, r18
    27d6:	13 06       	cpc	r1, r19
    27d8:	14 06       	cpc	r1, r20
    27da:	55 1f       	adc	r21, r21
    27dc:	f2 cf       	rjmp	.-28     	; 0x27c2 <__fp_split3+0xe>
    27de:	46 95       	lsr	r20
    27e0:	f1 df       	rcall	.-30     	; 0x27c4 <__fp_splitA>
    27e2:	08 c0       	rjmp	.+16     	; 0x27f4 <__fp_splitA+0x30>
    27e4:	16 16       	cp	r1, r22
    27e6:	17 06       	cpc	r1, r23
    27e8:	18 06       	cpc	r1, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	f1 cf       	rjmp	.-30     	; 0x27d0 <__fp_splitA+0xc>
    27ee:	86 95       	lsr	r24
    27f0:	71 05       	cpc	r23, r1
    27f2:	61 05       	cpc	r22, r1
    27f4:	08 94       	sec
    27f6:	08 95       	ret

000027f8 <__fp_zero>:
    27f8:	e8 94       	clt

000027fa <__fp_szero>:
    27fa:	bb 27       	eor	r27, r27
    27fc:	66 27       	eor	r22, r22
    27fe:	77 27       	eor	r23, r23
    2800:	cb 01       	movw	r24, r22
    2802:	97 f9       	bld	r25, 7
    2804:	08 95       	ret

00002806 <__gesf2>:
    2806:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_cmp>
    280a:	08 f4       	brcc	.+2      	; 0x280e <__gesf2+0x8>
    280c:	8f ef       	ldi	r24, 0xFF	; 255
    280e:	08 95       	ret

00002810 <inverse>:
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	80 e8       	ldi	r24, 0x80	; 128
    281a:	9f e3       	ldi	r25, 0x3F	; 63
    281c:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__divsf3>

00002820 <__mulsf3>:
    2820:	0e 94 23 14 	call	0x2846	; 0x2846 <__mulsf3x>
    2824:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    2828:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    282c:	38 f0       	brcs	.+14     	; 0x283c <__mulsf3+0x1c>
    282e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2832:	20 f0       	brcs	.+8      	; 0x283c <__mulsf3+0x1c>
    2834:	95 23       	and	r25, r21
    2836:	11 f0       	breq	.+4      	; 0x283c <__mulsf3+0x1c>
    2838:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    283c:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    2840:	11 24       	eor	r1, r1
    2842:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>

00002846 <__mulsf3x>:
    2846:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    284a:	70 f3       	brcs	.-36     	; 0x2828 <__mulsf3+0x8>

0000284c <__mulsf3_pse>:
    284c:	95 9f       	mul	r25, r21
    284e:	c1 f3       	breq	.-16     	; 0x2840 <__mulsf3+0x20>
    2850:	95 0f       	add	r25, r21
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	55 1f       	adc	r21, r21
    2856:	62 9f       	mul	r22, r18
    2858:	f0 01       	movw	r30, r0
    285a:	72 9f       	mul	r23, r18
    285c:	bb 27       	eor	r27, r27
    285e:	f0 0d       	add	r31, r0
    2860:	b1 1d       	adc	r27, r1
    2862:	63 9f       	mul	r22, r19
    2864:	aa 27       	eor	r26, r26
    2866:	f0 0d       	add	r31, r0
    2868:	b1 1d       	adc	r27, r1
    286a:	aa 1f       	adc	r26, r26
    286c:	64 9f       	mul	r22, r20
    286e:	66 27       	eor	r22, r22
    2870:	b0 0d       	add	r27, r0
    2872:	a1 1d       	adc	r26, r1
    2874:	66 1f       	adc	r22, r22
    2876:	82 9f       	mul	r24, r18
    2878:	22 27       	eor	r18, r18
    287a:	b0 0d       	add	r27, r0
    287c:	a1 1d       	adc	r26, r1
    287e:	62 1f       	adc	r22, r18
    2880:	73 9f       	mul	r23, r19
    2882:	b0 0d       	add	r27, r0
    2884:	a1 1d       	adc	r26, r1
    2886:	62 1f       	adc	r22, r18
    2888:	83 9f       	mul	r24, r19
    288a:	a0 0d       	add	r26, r0
    288c:	61 1d       	adc	r22, r1
    288e:	22 1f       	adc	r18, r18
    2890:	74 9f       	mul	r23, r20
    2892:	33 27       	eor	r19, r19
    2894:	a0 0d       	add	r26, r0
    2896:	61 1d       	adc	r22, r1
    2898:	23 1f       	adc	r18, r19
    289a:	84 9f       	mul	r24, r20
    289c:	60 0d       	add	r22, r0
    289e:	21 1d       	adc	r18, r1
    28a0:	82 2f       	mov	r24, r18
    28a2:	76 2f       	mov	r23, r22
    28a4:	6a 2f       	mov	r22, r26
    28a6:	11 24       	eor	r1, r1
    28a8:	9f 57       	subi	r25, 0x7F	; 127
    28aa:	50 40       	sbci	r21, 0x00	; 0
    28ac:	9a f0       	brmi	.+38     	; 0x28d4 <__mulsf3_pse+0x88>
    28ae:	f1 f0       	breq	.+60     	; 0x28ec <__mulsf3_pse+0xa0>
    28b0:	88 23       	and	r24, r24
    28b2:	4a f0       	brmi	.+18     	; 0x28c6 <__mulsf3_pse+0x7a>
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	bb 1f       	adc	r27, r27
    28ba:	66 1f       	adc	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	88 1f       	adc	r24, r24
    28c0:	91 50       	subi	r25, 0x01	; 1
    28c2:	50 40       	sbci	r21, 0x00	; 0
    28c4:	a9 f7       	brne	.-22     	; 0x28b0 <__mulsf3_pse+0x64>
    28c6:	9e 3f       	cpi	r25, 0xFE	; 254
    28c8:	51 05       	cpc	r21, r1
    28ca:	80 f0       	brcs	.+32     	; 0x28ec <__mulsf3_pse+0xa0>
    28cc:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    28d0:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    28d4:	5f 3f       	cpi	r21, 0xFF	; 255
    28d6:	e4 f3       	brlt	.-8      	; 0x28d0 <__mulsf3_pse+0x84>
    28d8:	98 3e       	cpi	r25, 0xE8	; 232
    28da:	d4 f3       	brlt	.-12     	; 0x28d0 <__mulsf3_pse+0x84>
    28dc:	86 95       	lsr	r24
    28de:	77 95       	ror	r23
    28e0:	67 95       	ror	r22
    28e2:	b7 95       	ror	r27
    28e4:	f7 95       	ror	r31
    28e6:	e7 95       	ror	r30
    28e8:	9f 5f       	subi	r25, 0xFF	; 255
    28ea:	c1 f7       	brne	.-16     	; 0x28dc <__mulsf3_pse+0x90>
    28ec:	fe 2b       	or	r31, r30
    28ee:	88 0f       	add	r24, r24
    28f0:	91 1d       	adc	r25, r1
    28f2:	96 95       	lsr	r25
    28f4:	87 95       	ror	r24
    28f6:	97 f9       	bld	r25, 7
    28f8:	08 95       	ret

000028fa <pow>:
    28fa:	fa 01       	movw	r30, r20
    28fc:	ee 0f       	add	r30, r30
    28fe:	ff 1f       	adc	r31, r31
    2900:	30 96       	adiw	r30, 0x00	; 0
    2902:	21 05       	cpc	r18, r1
    2904:	31 05       	cpc	r19, r1
    2906:	a1 f1       	breq	.+104    	; 0x2970 <pow+0x76>
    2908:	61 15       	cp	r22, r1
    290a:	71 05       	cpc	r23, r1
    290c:	61 f4       	brne	.+24     	; 0x2926 <pow+0x2c>
    290e:	80 38       	cpi	r24, 0x80	; 128
    2910:	bf e3       	ldi	r27, 0x3F	; 63
    2912:	9b 07       	cpc	r25, r27
    2914:	49 f1       	breq	.+82     	; 0x2968 <pow+0x6e>
    2916:	68 94       	set
    2918:	90 38       	cpi	r25, 0x80	; 128
    291a:	81 05       	cpc	r24, r1
    291c:	61 f0       	breq	.+24     	; 0x2936 <pow+0x3c>
    291e:	80 38       	cpi	r24, 0x80	; 128
    2920:	bf ef       	ldi	r27, 0xFF	; 255
    2922:	9b 07       	cpc	r25, r27
    2924:	41 f0       	breq	.+16     	; 0x2936 <pow+0x3c>
    2926:	99 23       	and	r25, r25
    2928:	4a f5       	brpl	.+82     	; 0x297c <pow+0x82>
    292a:	ff 3f       	cpi	r31, 0xFF	; 255
    292c:	e1 05       	cpc	r30, r1
    292e:	31 05       	cpc	r19, r1
    2930:	21 05       	cpc	r18, r1
    2932:	19 f1       	breq	.+70     	; 0x297a <pow+0x80>
    2934:	e8 94       	clt
    2936:	08 94       	sec
    2938:	e7 95       	ror	r30
    293a:	d9 01       	movw	r26, r18
    293c:	aa 23       	and	r26, r26
    293e:	29 f4       	brne	.+10     	; 0x294a <pow+0x50>
    2940:	ab 2f       	mov	r26, r27
    2942:	be 2f       	mov	r27, r30
    2944:	f8 5f       	subi	r31, 0xF8	; 248
    2946:	d0 f3       	brcs	.-12     	; 0x293c <pow+0x42>
    2948:	10 c0       	rjmp	.+32     	; 0x296a <pow+0x70>
    294a:	ff 5f       	subi	r31, 0xFF	; 255
    294c:	70 f4       	brcc	.+28     	; 0x296a <pow+0x70>
    294e:	a6 95       	lsr	r26
    2950:	e0 f7       	brcc	.-8      	; 0x294a <pow+0x50>
    2952:	f7 39       	cpi	r31, 0x97	; 151
    2954:	50 f0       	brcs	.+20     	; 0x296a <pow+0x70>
    2956:	19 f0       	breq	.+6      	; 0x295e <pow+0x64>
    2958:	ff 3a       	cpi	r31, 0xAF	; 175
    295a:	38 f4       	brcc	.+14     	; 0x296a <pow+0x70>
    295c:	9f 77       	andi	r25, 0x7F	; 127
    295e:	9f 93       	push	r25
    2960:	0d d0       	rcall	.+26     	; 0x297c <pow+0x82>
    2962:	0f 90       	pop	r0
    2964:	07 fc       	sbrc	r0, 7
    2966:	90 58       	subi	r25, 0x80	; 128
    2968:	08 95       	ret
    296a:	46 f0       	brts	.+16     	; 0x297c <pow+0x82>
    296c:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	80 e8       	ldi	r24, 0x80	; 128
    2976:	9f e3       	ldi	r25, 0x3F	; 63
    2978:	08 95       	ret
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	9f 77       	andi	r25, 0x7F	; 127
    297e:	5f 93       	push	r21
    2980:	4f 93       	push	r20
    2982:	3f 93       	push	r19
    2984:	2f 93       	push	r18
    2986:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <log>
    298a:	2f 91       	pop	r18
    298c:	3f 91       	pop	r19
    298e:	4f 91       	pop	r20
    2990:	5f 91       	pop	r21
    2992:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    2996:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <exp>

0000299a <sin>:
    299a:	9f 93       	push	r25
    299c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__fp_rempio2>
    29a0:	0f 90       	pop	r0
    29a2:	07 fc       	sbrc	r0, 7
    29a4:	ee 5f       	subi	r30, 0xFE	; 254
    29a6:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__fp_sinus>

000029aa <square>:
    29aa:	9b 01       	movw	r18, r22
    29ac:	ac 01       	movw	r20, r24
    29ae:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__mulsf3>
    29b2:	29 f4       	brne	.+10     	; 0x29be <square+0x14>
    29b4:	16 f0       	brts	.+4      	; 0x29ba <square+0x10>
    29b6:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    29ba:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>
    29be:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>

000029c2 <exp>:
    29c2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    29c6:	a8 f3       	brcs	.-22     	; 0x29b2 <square+0x8>
    29c8:	96 38       	cpi	r25, 0x86	; 134
    29ca:	a0 f7       	brcc	.-24     	; 0x29b4 <square+0xa>
    29cc:	07 f8       	bld	r0, 7
    29ce:	0f 92       	push	r0
    29d0:	e8 94       	clt
    29d2:	2b e3       	ldi	r18, 0x3B	; 59
    29d4:	3a ea       	ldi	r19, 0xAA	; 170
    29d6:	48 eb       	ldi	r20, 0xB8	; 184
    29d8:	5f e7       	ldi	r21, 0x7F	; 127
    29da:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3_pse>
    29de:	0f 92       	push	r0
    29e0:	0f 92       	push	r0
    29e2:	0f 92       	push	r0
    29e4:	4d b7       	in	r20, 0x3d	; 61
    29e6:	5e b7       	in	r21, 0x3e	; 62
    29e8:	0f 92       	push	r0
    29ea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <modf>
    29ee:	e1 e8       	ldi	r30, 0x81	; 129
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_powser>
    29f6:	4f 91       	pop	r20
    29f8:	5f 91       	pop	r21
    29fa:	ef 91       	pop	r30
    29fc:	ff 91       	pop	r31
    29fe:	e5 95       	asr	r30
    2a00:	ee 1f       	adc	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	49 f0       	breq	.+18     	; 0x2a18 <exp+0x56>
    2a06:	fe 57       	subi	r31, 0x7E	; 126
    2a08:	e0 68       	ori	r30, 0x80	; 128
    2a0a:	44 27       	eor	r20, r20
    2a0c:	ee 0f       	add	r30, r30
    2a0e:	44 1f       	adc	r20, r20
    2a10:	fa 95       	dec	r31
    2a12:	e1 f7       	brne	.-8      	; 0x2a0c <exp+0x4a>
    2a14:	41 95       	neg	r20
    2a16:	55 0b       	sbc	r21, r21
    2a18:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <ldexp>
    2a1c:	0f 90       	pop	r0
    2a1e:	07 fe       	sbrs	r0, 7
    2a20:	0c 94 08 14 	jmp	0x2810	; 0x2810 <inverse>
    2a24:	08 95       	ret

00002a26 <__fp_mpack>:
    2a26:	9f 3f       	cpi	r25, 0xFF	; 255
    2a28:	31 f0       	breq	.+12     	; 0x2a36 <__fp_mpack_finite+0xc>

00002a2a <__fp_mpack_finite>:
    2a2a:	91 50       	subi	r25, 0x01	; 1
    2a2c:	20 f4       	brcc	.+8      	; 0x2a36 <__fp_mpack_finite+0xc>
    2a2e:	87 95       	ror	r24
    2a30:	77 95       	ror	r23
    2a32:	67 95       	ror	r22
    2a34:	b7 95       	ror	r27
    2a36:	88 0f       	add	r24, r24
    2a38:	91 1d       	adc	r25, r1
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	97 f9       	bld	r25, 7
    2a40:	08 95       	ret
    2a42:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>

00002a46 <__fp_rempio2>:
    2a46:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    2a4a:	d8 f3       	brcs	.-10     	; 0x2a42 <__fp_mpack_finite+0x18>
    2a4c:	e8 94       	clt
    2a4e:	e0 e0       	ldi	r30, 0x00	; 0
    2a50:	bb 27       	eor	r27, r27
    2a52:	9f 57       	subi	r25, 0x7F	; 127
    2a54:	f0 f0       	brcs	.+60     	; 0x2a92 <__fp_rempio2+0x4c>
    2a56:	2a ed       	ldi	r18, 0xDA	; 218
    2a58:	3f e0       	ldi	r19, 0x0F	; 15
    2a5a:	49 ec       	ldi	r20, 0xC9	; 201
    2a5c:	06 c0       	rjmp	.+12     	; 0x2a6a <__fp_rempio2+0x24>
    2a5e:	ee 0f       	add	r30, r30
    2a60:	bb 0f       	add	r27, r27
    2a62:	66 1f       	adc	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	88 1f       	adc	r24, r24
    2a68:	28 f0       	brcs	.+10     	; 0x2a74 <__fp_rempio2+0x2e>
    2a6a:	b2 3a       	cpi	r27, 0xA2	; 162
    2a6c:	62 07       	cpc	r22, r18
    2a6e:	73 07       	cpc	r23, r19
    2a70:	84 07       	cpc	r24, r20
    2a72:	28 f0       	brcs	.+10     	; 0x2a7e <__fp_rempio2+0x38>
    2a74:	b2 5a       	subi	r27, 0xA2	; 162
    2a76:	62 0b       	sbc	r22, r18
    2a78:	73 0b       	sbc	r23, r19
    2a7a:	84 0b       	sbc	r24, r20
    2a7c:	e3 95       	inc	r30
    2a7e:	9a 95       	dec	r25
    2a80:	72 f7       	brpl	.-36     	; 0x2a5e <__fp_rempio2+0x18>
    2a82:	80 38       	cpi	r24, 0x80	; 128
    2a84:	30 f4       	brcc	.+12     	; 0x2a92 <__fp_rempio2+0x4c>
    2a86:	9a 95       	dec	r25
    2a88:	bb 0f       	add	r27, r27
    2a8a:	66 1f       	adc	r22, r22
    2a8c:	77 1f       	adc	r23, r23
    2a8e:	88 1f       	adc	r24, r24
    2a90:	d2 f7       	brpl	.-12     	; 0x2a86 <__fp_rempio2+0x40>
    2a92:	90 48       	sbci	r25, 0x80	; 128
    2a94:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__fp_mpack_finite>

00002a98 <__fp_sinus>:
    2a98:	ef 93       	push	r30
    2a9a:	e0 ff       	sbrs	r30, 0
    2a9c:	07 c0       	rjmp	.+14     	; 0x2aac <__fp_sinus+0x14>
    2a9e:	a2 ea       	ldi	r26, 0xA2	; 162
    2aa0:	2a ed       	ldi	r18, 0xDA	; 218
    2aa2:	3f e0       	ldi	r19, 0x0F	; 15
    2aa4:	49 ec       	ldi	r20, 0xC9	; 201
    2aa6:	5f eb       	ldi	r21, 0xBF	; 191
    2aa8:	0e 94 b6 11 	call	0x236c	; 0x236c <__addsf3x>
    2aac:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fp_round>
    2ab0:	0f 90       	pop	r0
    2ab2:	03 94       	inc	r0
    2ab4:	01 fc       	sbrc	r0, 1
    2ab6:	90 58       	subi	r25, 0x80	; 128
    2ab8:	e9 ea       	ldi	r30, 0xA9	; 169
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_powsodd>
    2ac0:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    2ac4:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_mpack>

00002ac8 <ldexp>:
    2ac8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    2acc:	d8 f3       	brcs	.-10     	; 0x2ac4 <__fp_sinus+0x2c>
    2ace:	99 23       	and	r25, r25
    2ad0:	c9 f3       	breq	.-14     	; 0x2ac4 <__fp_sinus+0x2c>
    2ad2:	94 0f       	add	r25, r20
    2ad4:	51 1d       	adc	r21, r1
    2ad6:	a3 f3       	brvs	.-24     	; 0x2ac0 <__fp_sinus+0x28>
    2ad8:	91 50       	subi	r25, 0x01	; 1
    2ada:	50 40       	sbci	r21, 0x00	; 0
    2adc:	94 f0       	brlt	.+36     	; 0x2b02 <ldexp+0x3a>
    2ade:	59 f0       	breq	.+22     	; 0x2af6 <ldexp+0x2e>
    2ae0:	88 23       	and	r24, r24
    2ae2:	32 f0       	brmi	.+12     	; 0x2af0 <ldexp+0x28>
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	88 1f       	adc	r24, r24
    2aea:	91 50       	subi	r25, 0x01	; 1
    2aec:	50 40       	sbci	r21, 0x00	; 0
    2aee:	c1 f7       	brne	.-16     	; 0x2ae0 <ldexp+0x18>
    2af0:	9e 3f       	cpi	r25, 0xFE	; 254
    2af2:	51 05       	cpc	r21, r1
    2af4:	2c f7       	brge	.-54     	; 0x2ac0 <__fp_sinus+0x28>
    2af6:	88 0f       	add	r24, r24
    2af8:	91 1d       	adc	r25, r1
    2afa:	96 95       	lsr	r25
    2afc:	87 95       	ror	r24
    2afe:	97 f9       	bld	r25, 7
    2b00:	08 95       	ret
    2b02:	5f 3f       	cpi	r21, 0xFF	; 255
    2b04:	ac f0       	brlt	.+42     	; 0x2b30 <ldexp+0x68>
    2b06:	98 3e       	cpi	r25, 0xE8	; 232
    2b08:	9c f0       	brlt	.+38     	; 0x2b30 <ldexp+0x68>
    2b0a:	bb 27       	eor	r27, r27
    2b0c:	86 95       	lsr	r24
    2b0e:	77 95       	ror	r23
    2b10:	67 95       	ror	r22
    2b12:	b7 95       	ror	r27
    2b14:	08 f4       	brcc	.+2      	; 0x2b18 <ldexp+0x50>
    2b16:	b1 60       	ori	r27, 0x01	; 1
    2b18:	93 95       	inc	r25
    2b1a:	c1 f7       	brne	.-16     	; 0x2b0c <ldexp+0x44>
    2b1c:	bb 0f       	add	r27, r27
    2b1e:	58 f7       	brcc	.-42     	; 0x2af6 <ldexp+0x2e>
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <ldexp+0x5e>
    2b22:	60 ff       	sbrs	r22, 0
    2b24:	e8 cf       	rjmp	.-48     	; 0x2af6 <ldexp+0x2e>
    2b26:	6f 5f       	subi	r22, 0xFF	; 255
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	e3 cf       	rjmp	.-58     	; 0x2af6 <ldexp+0x2e>
    2b30:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    2b34:	16 f0       	brts	.+4      	; 0x2b3a <ldexp+0x72>
    2b36:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_mpack>
    2b3a:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    2b3e:	68 94       	set
    2b40:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>

00002b44 <log>:
    2b44:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    2b48:	a8 f3       	brcs	.-22     	; 0x2b34 <ldexp+0x6c>
    2b4a:	99 23       	and	r25, r25
    2b4c:	c1 f3       	breq	.-16     	; 0x2b3e <ldexp+0x76>
    2b4e:	ae f3       	brts	.-22     	; 0x2b3a <ldexp+0x72>
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	1f 93       	push	r17
    2b56:	0f 93       	push	r16
    2b58:	ff 92       	push	r15
    2b5a:	c9 2f       	mov	r28, r25
    2b5c:	dd 27       	eor	r29, r29
    2b5e:	88 23       	and	r24, r24
    2b60:	2a f0       	brmi	.+10     	; 0x2b6c <log+0x28>
    2b62:	21 97       	sbiw	r28, 0x01	; 1
    2b64:	66 0f       	add	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 1f       	adc	r24, r24
    2b6a:	da f7       	brpl	.-10     	; 0x2b62 <log+0x1e>
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f eb       	ldi	r21, 0xBF	; 191
    2b74:	9f e3       	ldi	r25, 0x3F	; 63
    2b76:	88 39       	cpi	r24, 0x98	; 152
    2b78:	20 f0       	brcs	.+8      	; 0x2b82 <log+0x3e>
    2b7a:	80 3e       	cpi	r24, 0xE0	; 224
    2b7c:	38 f0       	brcs	.+14     	; 0x2b8c <log+0x48>
    2b7e:	21 96       	adiw	r28, 0x01	; 1
    2b80:	8f 77       	andi	r24, 0x7F	; 127
    2b82:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    2b86:	e7 ec       	ldi	r30, 0xC7	; 199
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	04 c0       	rjmp	.+8      	; 0x2b94 <log+0x50>
    2b8c:	0e 94 9f 11 	call	0x233e	; 0x233e <__addsf3>
    2b90:	e4 ef       	ldi	r30, 0xF4	; 244
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_powser>
    2b98:	8b 01       	movw	r16, r22
    2b9a:	be 01       	movw	r22, r28
    2b9c:	ec 01       	movw	r28, r24
    2b9e:	fb 2e       	mov	r15, r27
    2ba0:	6f 57       	subi	r22, 0x7F	; 127
    2ba2:	71 09       	sbc	r23, r1
    2ba4:	75 95       	asr	r23
    2ba6:	77 1f       	adc	r23, r23
    2ba8:	88 0b       	sbc	r24, r24
    2baa:	99 0b       	sbc	r25, r25
    2bac:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    2bb0:	28 e1       	ldi	r18, 0x18	; 24
    2bb2:	32 e7       	ldi	r19, 0x72	; 114
    2bb4:	41 e3       	ldi	r20, 0x31	; 49
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 23 14 	call	0x2846	; 0x2846 <__mulsf3x>
    2bbc:	af 2d       	mov	r26, r15
    2bbe:	98 01       	movw	r18, r16
    2bc0:	ae 01       	movw	r20, r28
    2bc2:	ff 90       	pop	r15
    2bc4:	0f 91       	pop	r16
    2bc6:	1f 91       	pop	r17
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	0e 94 b6 11 	call	0x236c	; 0x236c <__addsf3x>
    2bd0:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>

00002bd4 <modf>:
    2bd4:	fa 01       	movw	r30, r20
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	aa 0f       	add	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	9b 01       	movw	r18, r22
    2bde:	ac 01       	movw	r20, r24
    2be0:	bf 57       	subi	r27, 0x7F	; 127
    2be2:	28 f4       	brcc	.+10     	; 0x2bee <modf+0x1a>
    2be4:	22 27       	eor	r18, r18
    2be6:	33 27       	eor	r19, r19
    2be8:	44 27       	eor	r20, r20
    2bea:	50 78       	andi	r21, 0x80	; 128
    2bec:	20 c0       	rjmp	.+64     	; 0x2c2e <modf+0x5a>
    2bee:	b7 51       	subi	r27, 0x17	; 23
    2bf0:	90 f4       	brcc	.+36     	; 0x2c16 <modf+0x42>
    2bf2:	ab 2f       	mov	r26, r27
    2bf4:	00 24       	eor	r0, r0
    2bf6:	46 95       	lsr	r20
    2bf8:	37 95       	ror	r19
    2bfa:	27 95       	ror	r18
    2bfc:	01 1c       	adc	r0, r1
    2bfe:	a3 95       	inc	r26
    2c00:	d2 f3       	brmi	.-12     	; 0x2bf6 <modf+0x22>
    2c02:	00 20       	and	r0, r0
    2c04:	71 f0       	breq	.+28     	; 0x2c22 <modf+0x4e>
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	44 1f       	adc	r20, r20
    2c0c:	b3 95       	inc	r27
    2c0e:	da f3       	brmi	.-10     	; 0x2c06 <modf+0x32>
    2c10:	0e d0       	rcall	.+28     	; 0x2c2e <modf+0x5a>
    2c12:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__subsf3>
    2c16:	61 30       	cpi	r22, 0x01	; 1
    2c18:	71 05       	cpc	r23, r1
    2c1a:	a0 e8       	ldi	r26, 0x80	; 128
    2c1c:	8a 07       	cpc	r24, r26
    2c1e:	b9 46       	sbci	r27, 0x69	; 105
    2c20:	30 f4       	brcc	.+12     	; 0x2c2e <modf+0x5a>
    2c22:	9b 01       	movw	r18, r22
    2c24:	ac 01       	movw	r20, r24
    2c26:	66 27       	eor	r22, r22
    2c28:	77 27       	eor	r23, r23
    2c2a:	88 27       	eor	r24, r24
    2c2c:	90 78       	andi	r25, 0x80	; 128
    2c2e:	30 96       	adiw	r30, 0x00	; 0
    2c30:	21 f0       	breq	.+8      	; 0x2c3a <modf+0x66>
    2c32:	20 83       	st	Z, r18
    2c34:	31 83       	std	Z+1, r19	; 0x01
    2c36:	42 83       	std	Z+2, r20	; 0x02
    2c38:	53 83       	std	Z+3, r21	; 0x03
    2c3a:	08 95       	ret

00002c3c <__fp_powsodd>:
    2c3c:	9f 93       	push	r25
    2c3e:	8f 93       	push	r24
    2c40:	7f 93       	push	r23
    2c42:	6f 93       	push	r22
    2c44:	ff 93       	push	r31
    2c46:	ef 93       	push	r30
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	0e 94 10 14 	call	0x2820	; 0x2820 <__mulsf3>
    2c50:	ef 91       	pop	r30
    2c52:	ff 91       	pop	r31
    2c54:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_powser>
    2c58:	2f 91       	pop	r18
    2c5a:	3f 91       	pop	r19
    2c5c:	4f 91       	pop	r20
    2c5e:	5f 91       	pop	r21
    2c60:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__mulsf3>

00002c64 <__mulsi3>:
    2c64:	db 01       	movw	r26, r22
    2c66:	8f 93       	push	r24
    2c68:	9f 93       	push	r25
    2c6a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
    2c6e:	bf 91       	pop	r27
    2c70:	af 91       	pop	r26
    2c72:	a2 9f       	mul	r26, r18
    2c74:	80 0d       	add	r24, r0
    2c76:	91 1d       	adc	r25, r1
    2c78:	a3 9f       	mul	r26, r19
    2c7a:	90 0d       	add	r25, r0
    2c7c:	b2 9f       	mul	r27, r18
    2c7e:	90 0d       	add	r25, r0
    2c80:	11 24       	eor	r1, r1
    2c82:	08 95       	ret

00002c84 <__udivmodsi4>:
    2c84:	a1 e2       	ldi	r26, 0x21	; 33
    2c86:	1a 2e       	mov	r1, r26
    2c88:	aa 1b       	sub	r26, r26
    2c8a:	bb 1b       	sub	r27, r27
    2c8c:	fd 01       	movw	r30, r26
    2c8e:	0d c0       	rjmp	.+26     	; 0x2caa <__udivmodsi4_ep>

00002c90 <__udivmodsi4_loop>:
    2c90:	aa 1f       	adc	r26, r26
    2c92:	bb 1f       	adc	r27, r27
    2c94:	ee 1f       	adc	r30, r30
    2c96:	ff 1f       	adc	r31, r31
    2c98:	a2 17       	cp	r26, r18
    2c9a:	b3 07       	cpc	r27, r19
    2c9c:	e4 07       	cpc	r30, r20
    2c9e:	f5 07       	cpc	r31, r21
    2ca0:	20 f0       	brcs	.+8      	; 0x2caa <__udivmodsi4_ep>
    2ca2:	a2 1b       	sub	r26, r18
    2ca4:	b3 0b       	sbc	r27, r19
    2ca6:	e4 0b       	sbc	r30, r20
    2ca8:	f5 0b       	sbc	r31, r21

00002caa <__udivmodsi4_ep>:
    2caa:	66 1f       	adc	r22, r22
    2cac:	77 1f       	adc	r23, r23
    2cae:	88 1f       	adc	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	1a 94       	dec	r1
    2cb4:	69 f7       	brne	.-38     	; 0x2c90 <__udivmodsi4_loop>
    2cb6:	60 95       	com	r22
    2cb8:	70 95       	com	r23
    2cba:	80 95       	com	r24
    2cbc:	90 95       	com	r25
    2cbe:	9b 01       	movw	r18, r22
    2cc0:	ac 01       	movw	r20, r24
    2cc2:	bd 01       	movw	r22, r26
    2cc4:	cf 01       	movw	r24, r30
    2cc6:	08 95       	ret

00002cc8 <__divmodsi4>:
    2cc8:	05 2e       	mov	r0, r21
    2cca:	97 fb       	bst	r25, 7
    2ccc:	1e f4       	brtc	.+6      	; 0x2cd4 <__divmodsi4+0xc>
    2cce:	00 94       	com	r0
    2cd0:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__negsi2>
    2cd4:	57 fd       	sbrc	r21, 7
    2cd6:	07 d0       	rcall	.+14     	; 0x2ce6 <__divmodsi4_neg2>
    2cd8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodsi4>
    2cdc:	07 fc       	sbrc	r0, 7
    2cde:	03 d0       	rcall	.+6      	; 0x2ce6 <__divmodsi4_neg2>
    2ce0:	4e f4       	brtc	.+18     	; 0x2cf4 <__divmodsi4_exit>
    2ce2:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__negsi2>

00002ce6 <__divmodsi4_neg2>:
    2ce6:	50 95       	com	r21
    2ce8:	40 95       	com	r20
    2cea:	30 95       	com	r19
    2cec:	21 95       	neg	r18
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    2cf2:	5f 4f       	sbci	r21, 0xFF	; 255

00002cf4 <__divmodsi4_exit>:
    2cf4:	08 95       	ret

00002cf6 <__negsi2>:
    2cf6:	90 95       	com	r25
    2cf8:	80 95       	com	r24
    2cfa:	70 95       	com	r23
    2cfc:	61 95       	neg	r22
    2cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2d00:	8f 4f       	sbci	r24, 0xFF	; 255
    2d02:	9f 4f       	sbci	r25, 0xFF	; 255
    2d04:	08 95       	ret

00002d06 <__muluhisi3>:
    2d06:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__umulhisi3>
    2d0a:	a5 9f       	mul	r26, r21
    2d0c:	90 0d       	add	r25, r0
    2d0e:	b4 9f       	mul	r27, r20
    2d10:	90 0d       	add	r25, r0
    2d12:	a4 9f       	mul	r26, r20
    2d14:	80 0d       	add	r24, r0
    2d16:	91 1d       	adc	r25, r1
    2d18:	11 24       	eor	r1, r1
    2d1a:	08 95       	ret

00002d1c <__mulshisi3>:
    2d1c:	b7 ff       	sbrs	r27, 7
    2d1e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__muluhisi3>

00002d22 <__mulohisi3>:
    2d22:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__muluhisi3>
    2d26:	82 1b       	sub	r24, r18
    2d28:	93 0b       	sbc	r25, r19
    2d2a:	08 95       	ret

00002d2c <__umulhisi3>:
    2d2c:	a2 9f       	mul	r26, r18
    2d2e:	b0 01       	movw	r22, r0
    2d30:	b3 9f       	mul	r27, r19
    2d32:	c0 01       	movw	r24, r0
    2d34:	a3 9f       	mul	r26, r19
    2d36:	70 0d       	add	r23, r0
    2d38:	81 1d       	adc	r24, r1
    2d3a:	11 24       	eor	r1, r1
    2d3c:	91 1d       	adc	r25, r1
    2d3e:	b2 9f       	mul	r27, r18
    2d40:	70 0d       	add	r23, r0
    2d42:	81 1d       	adc	r24, r1
    2d44:	11 24       	eor	r1, r1
    2d46:	91 1d       	adc	r25, r1
    2d48:	08 95       	ret

00002d4a <ltoa>:
    2d4a:	25 32       	cpi	r18, 0x25	; 37
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	20 f4       	brcc	.+8      	; 0x2d58 <ltoa+0xe>
    2d50:	22 30       	cpi	r18, 0x02	; 2
    2d52:	10 f0       	brcs	.+4      	; 0x2d58 <ltoa+0xe>
    2d54:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__ltoa_ncheck>
    2d58:	fa 01       	movw	r30, r20
    2d5a:	10 82       	st	Z, r1
    2d5c:	ca 01       	movw	r24, r20
    2d5e:	08 95       	ret

00002d60 <__ltoa_ncheck>:
    2d60:	bb 27       	eor	r27, r27
    2d62:	2a 30       	cpi	r18, 0x0A	; 10
    2d64:	51 f4       	brne	.+20     	; 0x2d7a <__ltoa_ncheck+0x1a>
    2d66:	99 23       	and	r25, r25
    2d68:	42 f4       	brpl	.+16     	; 0x2d7a <__ltoa_ncheck+0x1a>
    2d6a:	bd e2       	ldi	r27, 0x2D	; 45
    2d6c:	90 95       	com	r25
    2d6e:	80 95       	com	r24
    2d70:	70 95       	com	r23
    2d72:	61 95       	neg	r22
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	8f 4f       	sbci	r24, 0xFF	; 255
    2d78:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7a:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__ultoa_common>

00002d7e <__ultoa_ncheck>:
    2d7e:	bb 27       	eor	r27, r27

00002d80 <__ultoa_common>:
    2d80:	fa 01       	movw	r30, r20
    2d82:	a6 2f       	mov	r26, r22
    2d84:	62 17       	cp	r22, r18
    2d86:	71 05       	cpc	r23, r1
    2d88:	81 05       	cpc	r24, r1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	33 0b       	sbc	r19, r19
    2d8e:	30 fb       	bst	r19, 0
    2d90:	66 f0       	brts	.+24     	; 0x2daa <__ultoa_common+0x2a>
    2d92:	aa 27       	eor	r26, r26
    2d94:	66 0f       	add	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	aa 1f       	adc	r26, r26
    2d9e:	a2 17       	cp	r26, r18
    2da0:	10 f0       	brcs	.+4      	; 0x2da6 <__ultoa_common+0x26>
    2da2:	a2 1b       	sub	r26, r18
    2da4:	63 95       	inc	r22
    2da6:	38 50       	subi	r19, 0x08	; 8
    2da8:	a9 f7       	brne	.-22     	; 0x2d94 <__ultoa_common+0x14>
    2daa:	a0 5d       	subi	r26, 0xD0	; 208
    2dac:	aa 33       	cpi	r26, 0x3A	; 58
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <__ultoa_common+0x32>
    2db0:	a9 5d       	subi	r26, 0xD9	; 217
    2db2:	a1 93       	st	Z+, r26
    2db4:	36 f7       	brtc	.-52     	; 0x2d82 <__ultoa_common+0x2>
    2db6:	b1 11       	cpse	r27, r1
    2db8:	b1 93       	st	Z+, r27
    2dba:	10 82       	st	Z, r1
    2dbc:	ca 01       	movw	r24, r20
    2dbe:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <strrev>

00002dc2 <strrev>:
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	67 2f       	mov	r22, r23
    2dc8:	71 91       	ld	r23, Z+
    2dca:	77 23       	and	r23, r23
    2dcc:	e1 f7       	brne	.-8      	; 0x2dc6 <strrev+0x4>
    2dce:	32 97       	sbiw	r30, 0x02	; 2
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <strrev+0x18>
    2dd2:	7c 91       	ld	r23, X
    2dd4:	6d 93       	st	X+, r22
    2dd6:	70 83       	st	Z, r23
    2dd8:	62 91       	ld	r22, -Z
    2dda:	ae 17       	cp	r26, r30
    2ddc:	bf 07       	cpc	r27, r31
    2dde:	c8 f3       	brcs	.-14     	; 0x2dd2 <strrev+0x10>
    2de0:	08 95       	ret

00002de2 <_exit>:
    2de2:	f8 94       	cli

00002de4 <__stop_program>:
    2de4:	ff cf       	rjmp	.-2      	; 0x2de4 <__stop_program>
